# Shared Configuration Application Properties
spring:
  application:
    name: payments-engine
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:local}
  cloud:
    config:
      enabled: ${SPRING_CLOUD_CONFIG_ENABLED:false}
      server:
        git:
          uri: ${CONFIG_GIT_URI:}
          username: ${CONFIG_GIT_USERNAME:}
          password: ${CONFIG_GIT_PASSWORD:}
    vault:
      enabled: ${SPRING_CLOUD_VAULT_ENABLED:false}
      host: ${VAULT_HOST:localhost}
      port: ${VAULT_PORT:8200}
      scheme: ${VAULT_SCHEME:http}
      authentication: ${VAULT_AUTHENTICATION:TOKEN}
      token: ${VAULT_TOKEN:}
    consul:
      enabled: ${SPRING_CLOUD_CONSUL_ENABLED:false}
      host: ${CONSUL_HOST:localhost}
      port: ${CONSUL_PORT:8500}
    kubernetes:
      enabled: ${SPRING_CLOUD_KUBERNETES_ENABLED:false}
      config:
        enabled: ${KUBERNETES_CONFIG_ENABLED:false}

# Payments Engine Configuration
payments:
  # Database Configuration
  database:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/payments}
    username: ${DATABASE_USERNAME:payments}
    password: ${DATABASE_PASSWORD:payments}
    driverClassName: ${DATABASE_DRIVER:org.postgresql.Driver}
    maximumPoolSize: ${DATABASE_MAX_POOL_SIZE:20}
    minimumIdle: ${DATABASE_MIN_IDLE:5}
    connectionTimeout: ${DATABASE_CONNECTION_TIMEOUT:30000}
    idleTimeout: ${DATABASE_IDLE_TIMEOUT:600000}
    maxLifetime: ${DATABASE_MAX_LIFETIME:1800000}
    autoCommit: ${DATABASE_AUTO_COMMIT:true}
    poolName: ${DATABASE_POOL_NAME:PaymentsEnginePool}

  # Cache Configuration
  cache:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    database: ${REDIS_DATABASE:0}
    timeout: ${REDIS_TIMEOUT:2000}
    maxTotal: ${REDIS_MAX_TOTAL:8}
    maxIdle: ${REDIS_MAX_IDLE:8}
    minIdle: ${REDIS_MIN_IDLE:0}
    maxWaitMillis: ${REDIS_MAX_WAIT_MILLIS:-1}
    testOnBorrow: ${REDIS_TEST_ON_BORROW:true}
    testOnReturn: ${REDIS_TEST_ON_RETURN:false}
    testWhileIdle: ${REDIS_TEST_WHILE_IDLE:true}

  # Messaging Configuration
  messaging:
    kafka:
      bootstrapServers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
      groupId: ${KAFKA_GROUP_ID:payments-engine}
      clientId: ${KAFKA_CLIENT_ID:payments-engine-client}
      sessionTimeoutMs: ${KAFKA_SESSION_TIMEOUT_MS:30000}
      heartbeatIntervalMs: ${KAFKA_HEARTBEAT_INTERVAL_MS:10000}
      maxPollRecords: ${KAFKA_MAX_POLL_RECORDS:500}
      autoOffsetReset: ${KAFKA_AUTO_OFFSET_RESET:earliest}
      enableAutoCommit: ${KAFKA_ENABLE_AUTO_COMMIT:false}
      enableIdempotence: ${KAFKA_ENABLE_IDEMPOTENCE:true}
      maxInFlightRequestsPerConnection: ${KAFKA_MAX_IN_FLIGHT_REQUESTS:5}
      retries: ${KAFKA_RETRIES:3}
      retryBackoffMs: ${KAFKA_RETRY_BACKOFF_MS:100}
      requestTimeoutMs: ${KAFKA_REQUEST_TIMEOUT_MS:30000}
    rabbitmq:
      host: ${RABBITMQ_HOST:localhost}
      port: ${RABBITMQ_PORT:5672}
      username: ${RABBITMQ_USERNAME:guest}
      password: ${RABBITMQ_PASSWORD:guest}
      virtualHost: ${RABBITMQ_VIRTUAL_HOST:/}
      connectionTimeout: ${RABBITMQ_CONNECTION_TIMEOUT:60000}
      requestedHeartbeat: ${RABBITMQ_REQUESTED_HEARTBEAT:60}
      networkRecoveryInterval: ${RABBITMQ_NETWORK_RECOVERY_INTERVAL:5000}
      automaticRecoveryEnabled: ${RABBITMQ_AUTOMATIC_RECOVERY_ENABLED:true}
      topologyRecoveryEnabled: ${RABBITMQ_TOPOLOGY_RECOVERY_ENABLED:true}

  # Security Configuration
  security:
    jwt:
      secret: ${JWT_SECRET:default-secret}
      expiration: ${JWT_EXPIRATION:86400000}
      issuer: ${JWT_ISSUER:payments-engine}
      audience: ${JWT_AUDIENCE:payments-engine}
      refreshExpiration: ${JWT_REFRESH_EXPIRATION:604800000}
    oauth2:
      clientId: ${OAUTH2_CLIENT_ID:payments-engine}
      clientSecret: ${OAUTH2_CLIENT_SECRET:default-secret}
      tokenUri: ${OAUTH2_TOKEN_URI:http://localhost:8080/oauth/token}
      authorizationUri: ${OAUTH2_AUTHORIZATION_URI:http://localhost:8080/oauth/authorize}
      userInfoUri: ${OAUTH2_USER_INFO_URI:http://localhost:8080/oauth/userinfo}
      tokenValiditySeconds: ${OAUTH2_TOKEN_VALIDITY_SECONDS:3600}
      refreshTokenValiditySeconds: ${OAUTH2_REFRESH_TOKEN_VALIDITY_SECONDS:86400}
    encryption:
      enabled: ${ENCRYPTION_ENABLED:true}
      algorithm: ${ENCRYPTION_ALGORITHM:AES}
      key: ${ENCRYPTION_KEY:}
      salt: ${ENCRYPTION_SALT:}
      keyLength: ${ENCRYPTION_KEY_LENGTH:256}
      iterations: ${ENCRYPTION_ITERATIONS:10000}

  # Telemetry Configuration
  telemetry:
    tracing:
      enabled: ${TELEMETRY_TRACING_ENABLED:true}
      exporter: ${TELEMETRY_TRACING_EXPORTER:jaeger}
      service:
        name: ${TELEMETRY_SERVICE_NAME:payments-engine}
        version: ${TELEMETRY_SERVICE_VERSION:0.1.0}
      jaeger:
        endpoint: ${TELEMETRY_JAEGER_ENDPOINT:http://localhost:14250}
        serviceName: ${TELEMETRY_JAEGER_SERVICE_NAME:payments-engine}
      otlp:
        endpoint: ${TELEMETRY_OTLP_ENDPOINT:http://localhost:4317}
        protocol: ${TELEMETRY_OTLP_PROTOCOL:grpc}
      zipkin:
        endpoint: ${TELEMETRY_ZIPKIN_ENDPOINT:http://localhost:9411/api/v2/spans}
    metrics:
      enabled: ${TELEMETRY_METRICS_ENABLED:true}
      prometheus:
        enabled: ${TELEMETRY_PROMETHEUS_ENABLED:true}
        endpoint: ${TELEMETRY_PROMETHEUS_ENDPOINT:/actuator/prometheus}
        step: ${TELEMETRY_PROMETHEUS_STEP:10}
    logging:
      enabled: ${TELEMETRY_LOGGING_ENABLED:true}
      structured: ${TELEMETRY_LOGGING_STRUCTURED:true}
      level: ${TELEMETRY_LOGGING_LEVEL:INFO}
      file:
        path: ${TELEMETRY_LOGGING_FILE_PATH:logs/payments-engine.log}
        maxSize: ${TELEMETRY_LOGGING_FILE_MAX_SIZE:100MB}
        maxHistory: ${TELEMETRY_LOGGING_FILE_MAX_HISTORY:30}

  # Service Configuration
  services:
    paymentInitiation:
      baseUrl: ${PAYMENT_INITIATION_BASE_URL:http://localhost:8081}
      timeout: ${PAYMENT_INITIATION_TIMEOUT:30000}
      retryAttempts: ${PAYMENT_INITIATION_RETRY_ATTEMPTS:3}
      retryDelay: ${PAYMENT_INITIATION_RETRY_DELAY:1000}
    validation:
      baseUrl: ${VALIDATION_BASE_URL:http://localhost:8082}
      timeout: ${VALIDATION_TIMEOUT:30000}
      retryAttempts: ${VALIDATION_RETRY_ATTEMPTS:3}
      retryDelay: ${VALIDATION_RETRY_DELAY:1000}
    accountAdapter:
      baseUrl: ${ACCOUNT_ADAPTER_BASE_URL:http://localhost:8083}
      timeout: ${ACCOUNT_ADAPTER_TIMEOUT:30000}
      retryAttempts: ${ACCOUNT_ADAPTER_RETRY_ATTEMPTS:3}
      retryDelay: ${ACCOUNT_ADAPTER_RETRY_DELAY:1000}
    routing:
      baseUrl: ${ROUTING_BASE_URL:http://localhost:8084}
      timeout: ${ROUTING_TIMEOUT:30000}
      retryAttempts: ${ROUTING_RETRY_ATTEMPTS:3}
      retryDelay: ${ROUTING_RETRY_DELAY:1000}
    transactionProcessing:
      baseUrl: ${TRANSACTION_PROCESSING_BASE_URL:http://localhost:8085}
      timeout: ${TRANSACTION_PROCESSING_TIMEOUT:30000}
      retryAttempts: ${TRANSACTION_PROCESSING_RETRY_ATTEMPTS:3}
      retryDelay: ${TRANSACTION_PROCESSING_RETRY_DELAY:1000}
    sagaOrchestrator:
      baseUrl: ${SAGA_ORCHESTRATOR_BASE_URL:http://localhost:8086}
      timeout: ${SAGA_ORCHESTRATOR_TIMEOUT:30000}
      retryAttempts: ${SAGA_ORCHESTRATOR_RETRY_ATTEMPTS:3}
      retryDelay: ${SAGA_ORCHESTRATOR_RETRY_DELAY:1000}

  # Profile Configuration
  profiles:
    active: ${PAYMENTS_PROFILE:local}
    environments:
      local:
        name: local
        host: localhost
        environment: dev
      dev:
        name: dev
        host: dev.payments.com
        environment: dev
      staging:
        name: staging
        host: staging.payments.com
        environment: staging
      prod:
        name: prod
        host: payments.com
        environment: prod

  # Configuration Management
  config:
    management:
      enabled: ${CONFIG_MANAGEMENT_ENABLED:true}
    refresh:
      enabled: ${CONFIG_REFRESH_ENABLED:true}
    encryption:
      enabled: ${CONFIG_ENCRYPTION_ENABLED:true}

# Management Endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,configprops,env
  endpoint:
    health:
      show-details: always
    configprops:
      show-values: always
    env:
      show-values: always
  info:
    env:
      enabled: true
    java:
      enabled: true
    build:
      enabled: true






