# Production Profile Configuration
spring:
  profiles:
    active: prod
  datasource:
    url: ${DATABASE_URL}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      auto-commit: true
      pool-name: PaymentsEnginePool
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        use_sql_comments: false
  redis:
    host: ${REDIS_HOST}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD}
    database: ${REDIS_DATABASE:0}
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
        max-wait: -1ms
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    consumer:
      group-id: ${KAFKA_GROUP_ID}
      auto-offset-reset: earliest
      enable-auto-commit: false
      session-timeout-ms: 30000
      heartbeat-interval-ms: 10000
      max-poll-records: 500
    producer:
      acks: all
      retries: 3
      batch-size: 16384
      linger-ms: 1
      buffer-memory: 33554432
      enable-idempotence: true
      max-in-flight-requests-per-connection: 5

# Payments Engine Production Configuration
payments:
  # Production Database Configuration
  database:
    url: ${DATABASE_URL}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}
    maximumPoolSize: ${DATABASE_MAX_POOL_SIZE:20}
    minimumIdle: ${DATABASE_MIN_IDLE:5}
    connectionTimeout: ${DATABASE_CONNECTION_TIMEOUT:30000}
    idleTimeout: ${DATABASE_IDLE_TIMEOUT:600000}
    maxLifetime: ${DATABASE_MAX_LIFETIME:1800000}

  # Production Cache Configuration
  cache:
    host: ${REDIS_HOST}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD}
    database: ${REDIS_DATABASE:0}
    timeout: ${REDIS_TIMEOUT:2000}
    maxTotal: ${REDIS_MAX_TOTAL:8}
    maxIdle: ${REDIS_MAX_IDLE:8}
    minIdle: ${REDIS_MIN_IDLE:0}

  # Production Messaging Configuration
  messaging:
    kafka:
      bootstrapServers: ${KAFKA_BOOTSTRAP_SERVERS}
      groupId: ${KAFKA_GROUP_ID}
      clientId: ${KAFKA_CLIENT_ID}
      sessionTimeoutMs: ${KAFKA_SESSION_TIMEOUT_MS:30000}
      heartbeatIntervalMs: ${KAFKA_HEARTBEAT_INTERVAL_MS:10000}
      maxPollRecords: ${KAFKA_MAX_POLL_RECORDS:500}
      autoOffsetReset: ${KAFKA_AUTO_OFFSET_RESET:earliest}
      enableAutoCommit: ${KAFKA_ENABLE_AUTO_COMMIT:false}
      enableIdempotence: ${KAFKA_ENABLE_IDEMPOTENCE:true}

  # Production Security Configuration
  security:
    jwt:
      secret: ${JWT_SECRET}
      expiration: ${JWT_EXPIRATION:86400000}
      issuer: ${JWT_ISSUER:payments-engine}
      audience: ${JWT_AUDIENCE:payments-engine}
    oauth2:
      clientId: ${OAUTH2_CLIENT_ID}
      clientSecret: ${OAUTH2_CLIENT_SECRET}
      tokenUri: ${OAUTH2_TOKEN_URI}
      authorizationUri: ${OAUTH2_AUTHORIZATION_URI}
      userInfoUri: ${OAUTH2_USER_INFO_URI}
    encryption:
      enabled: true
      algorithm: ${ENCRYPTION_ALGORITHM:AES}
      key: ${ENCRYPTION_KEY}
      salt: ${ENCRYPTION_SALT}
      keyLength: ${ENCRYPTION_KEY_LENGTH:256}
      iterations: ${ENCRYPTION_ITERATIONS:10000}

  # Production Telemetry Configuration
  telemetry:
    tracing:
      enabled: ${TELEMETRY_TRACING_ENABLED:true}
      exporter: ${TELEMETRY_TRACING_EXPORTER:jaeger}
      service:
        name: ${TELEMETRY_SERVICE_NAME:payments-engine}
        version: ${TELEMETRY_SERVICE_VERSION:0.1.0}
      jaeger:
        endpoint: ${TELEMETRY_JAEGER_ENDPOINT}
        serviceName: ${TELEMETRY_JAEGER_SERVICE_NAME:payments-engine}
    metrics:
      enabled: ${TELEMETRY_METRICS_ENABLED:true}
      prometheus:
        enabled: ${TELEMETRY_PROMETHEUS_ENABLED:true}
        endpoint: ${TELEMETRY_PROMETHEUS_ENDPOINT:/actuator/prometheus}
    logging:
      enabled: ${TELEMETRY_LOGGING_ENABLED:true}
      structured: ${TELEMETRY_LOGGING_STRUCTURED:true}
      level: ${TELEMETRY_LOGGING_LEVEL:ERROR}
      file:
        path: ${TELEMETRY_LOGGING_FILE_PATH:/var/log/payments-engine/payments-engine.log}
        maxSize: ${TELEMETRY_LOGGING_FILE_MAX_SIZE:100MB}
        maxHistory: ${TELEMETRY_LOGGING_FILE_MAX_HISTORY:30}

  # Production Service Configuration
  services:
    paymentInitiation:
      baseUrl: ${PAYMENT_INITIATION_BASE_URL}
      timeout: ${PAYMENT_INITIATION_TIMEOUT:30000}
      retryAttempts: ${PAYMENT_INITIATION_RETRY_ATTEMPTS:3}
      retryDelay: ${PAYMENT_INITIATION_RETRY_DELAY:1000}
    validation:
      baseUrl: ${VALIDATION_BASE_URL}
      timeout: ${VALIDATION_TIMEOUT:30000}
      retryAttempts: ${VALIDATION_RETRY_ATTEMPTS:3}
      retryDelay: ${VALIDATION_RETRY_DELAY:1000}
    accountAdapter:
      baseUrl: ${ACCOUNT_ADAPTER_BASE_URL}
      timeout: ${ACCOUNT_ADAPTER_TIMEOUT:30000}
      retryAttempts: ${ACCOUNT_ADAPTER_RETRY_ATTEMPTS:3}
      retryDelay: ${ACCOUNT_ADAPTER_RETRY_DELAY:1000}
    routing:
      baseUrl: ${ROUTING_BASE_URL}
      timeout: ${ROUTING_TIMEOUT:30000}
      retryAttempts: ${ROUTING_RETRY_ATTEMPTS:3}
      retryDelay: ${ROUTING_RETRY_DELAY:1000}
    transactionProcessing:
      baseUrl: ${TRANSACTION_PROCESSING_BASE_URL}
      timeout: ${TRANSACTION_PROCESSING_TIMEOUT:30000}
      retryAttempts: ${TRANSACTION_PROCESSING_RETRY_ATTEMPTS:3}
      retryDelay: ${TRANSACTION_PROCESSING_RETRY_DELAY:1000}
    sagaOrchestrator:
      baseUrl: ${SAGA_ORCHESTRATOR_BASE_URL}
      timeout: ${SAGA_ORCHESTRATOR_TIMEOUT:30000}
      retryAttempts: ${SAGA_ORCHESTRATOR_RETRY_ATTEMPTS:3}
      retryDelay: ${SAGA_ORCHESTRATOR_RETRY_DELAY:1000}

  # Production Profile Configuration
  profiles:
    active: prod
    environments:
      prod:
        name: prod
        host: payments.com
        environment: prod

# Production Management Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
    configprops:
      show-values: false
    env:
      show-values: false
  info:
    env:
      enabled: true
    java:
      enabled: true
    build:
      enabled: true

# Production Logging Configuration
logging:
  level:
    com.payments: ERROR
    org.springframework: WARN
    org.hibernate: WARN
    org.apache.kafka: WARN
    io.opentelemetry: WARN
    io.micrometer: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{correlationId}] [%X{tenantId}] [%X{paymentId}] %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{correlationId}] [%X{tenantId}] [%X{paymentId}] %logger{36} - %msg%n"
  file:
    name: /var/log/payments-engine/payments-engine.log
    max-size: 100MB
    max-history: 30






