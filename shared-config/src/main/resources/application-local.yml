# Local Development Profile Configuration
spring:
  profiles:
    active: local
  datasource:
    url: jdbc:postgresql://localhost:5432/payments_local
    username: payments
    password: payments
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
  redis:
    host: localhost
    port: 6379
    password: 
    database: 0
    timeout: 2000ms
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: payments-engine-local
      auto-offset-reset: earliest
      enable-auto-commit: false
    producer:
      acks: all
      retries: 3
      batch-size: 16384
      linger-ms: 1
      buffer-memory: 33554432

# Payments Engine Local Configuration
payments:
  # Local Database Configuration
  database:
    url: jdbc:postgresql://localhost:5432/payments_local
    username: payments
    password: payments
    maximumPoolSize: 10
    minimumIdle: 2
    connectionTimeout: 30000
    idleTimeout: 600000
    maxLifetime: 1800000

  # Local Cache Configuration
  cache:
    host: localhost
    port: 6379
    password: 
    database: 0
    timeout: 2000
    maxTotal: 4
    maxIdle: 4
    minIdle: 0

  # Local Messaging Configuration
  messaging:
    kafka:
      bootstrapServers: localhost:9092
      groupId: payments-engine-local
      clientId: payments-engine-local-client
      sessionTimeoutMs: 30000
      heartbeatIntervalMs: 10000
      maxPollRecords: 100
      autoOffsetReset: earliest
      enableAutoCommit: false
      enableIdempotence: true

  # Local Security Configuration
  security:
    jwt:
      secret: local-secret-key
      expiration: 86400000
      issuer: payments-engine-local
      audience: payments-engine-local
    oauth2:
      clientId: payments-engine-local
      clientSecret: local-oauth2-secret
      tokenUri: http://localhost:8080/oauth/token
      authorizationUri: http://localhost:8080/oauth/authorize
      userInfoUri: http://localhost:8080/oauth/userinfo
    encryption:
      enabled: false
      algorithm: AES
      key: local-encryption-key
      salt: local-salt

  # Local Telemetry Configuration
  telemetry:
    tracing:
      enabled: true
      exporter: jaeger
      service:
        name: payments-engine-local
        version: 0.1.0-local
      jaeger:
        endpoint: http://localhost:14250
        serviceName: payments-engine-local
    metrics:
      enabled: true
      prometheus:
        enabled: true
        endpoint: /actuator/prometheus
    logging:
      enabled: true
      structured: true
      level: DEBUG
      file:
        path: logs/payments-engine-local.log
        maxSize: 50MB
        maxHistory: 7

  # Local Service Configuration
  services:
    paymentInitiation:
      baseUrl: http://localhost:8081
      timeout: 30000
      retryAttempts: 3
      retryDelay: 1000
    validation:
      baseUrl: http://localhost:8082
      timeout: 30000
      retryAttempts: 3
      retryDelay: 1000
    accountAdapter:
      baseUrl: http://localhost:8083
      timeout: 30000
      retryAttempts: 3
      retryDelay: 1000
    routing:
      baseUrl: http://localhost:8084
      timeout: 30000
      retryAttempts: 3
      retryDelay: 1000
    transactionProcessing:
      baseUrl: http://localhost:8085
      timeout: 30000
      retryAttempts: 3
      retryDelay: 1000
    sagaOrchestrator:
      baseUrl: http://localhost:8086
      timeout: 30000
      retryAttempts: 3
      retryDelay: 1000

  # Local Profile Configuration
  profiles:
    active: local
    environments:
      local:
        name: local
        host: localhost
        environment: dev

# Local Management Configuration
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
    configprops:
      show-values: always
    env:
      show-values: always
  info:
    env:
      enabled: true
    java:
      enabled: true
    build:
      enabled: true

# Local Logging Configuration
logging:
  level:
    com.payments: DEBUG
    org.springframework: INFO
    org.hibernate: DEBUG
    org.apache.kafka: INFO
    io.opentelemetry: WARN
    io.micrometer: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{correlationId}] [%X{tenantId}] [%X{paymentId}] %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{correlationId}] [%X{tenantId}] [%X{paymentId}] %logger{36} - %msg%n"






