# Logstash pipeline configuration for Payment Engine logs

input {
  beats {
    port => 5044
  }
  
  # Direct log input from applications
  tcp {
    port => 5000
    codec => json_lines
  }
  
  # Kafka input for real-time log streaming
  kafka {
    bootstrap_servers => "kafka:29092"
    topics => ["payment.audit.log", "payment.error.log"]
    group_id => "logstash-consumer"
    consumer_threads => 2
    codec => json
  }
}

filter {
  # Add common fields
  mutate {
    add_field => { "[@metadata][index_prefix]" => "payment-engine-logs" }
    add_field => { "[@metadata][doc_type]" => "payment-log" }
  }
  
  # Parse timestamp
  if [timestamp] {
    date {
      match => [ "timestamp", "yyyy-MM-dd'T'HH:mm:ss.SSSSSSXXX", "yyyy-MM-dd'T'HH:mm:ss.SSSXXX", "ISO8601" ]
      target => "@timestamp"
    }
  }
  
  # Extract service name from container name or logger
  if [container][name] {
    if [container][name] =~ /core-banking/ {
      mutate { add_field => { "service" => "core-banking" } }
    } else if [container][name] =~ /payment-processing/ {
      mutate { add_field => { "service" => "payment-processing" } }
    } else if [container][name] =~ /api-gateway/ {
      mutate { add_field => { "service" => "api-gateway" } }
    } else if [container][name] =~ /frontend/ {
      mutate { add_field => { "service" => "frontend" } }
    }
  }
  
  # Parse log level
  if [level] {
    mutate {
      uppercase => [ "level" ]
    }
  }
  
  # Extract correlation ID from log message
  if [message] =~ /\[([a-f0-9-]{36})\]/ {
    grok {
      match => { "message" => "\[(?<correlationId>[a-f0-9-]{36})\]" }
    }
  }
  
  # Extract transaction information from logs
  if [message] =~ /Transaction/ {
    grok {
      match => { 
        "message" => "Transaction %{DATA:transactionAction} - %{DATA:transactionDetails}" 
      }
    }
    
    # Extract transaction ID if present
    if [message] =~ /TXN-[0-9-]+/ {
      grok {
        match => { "message" => "(?<transactionId>TXN-[0-9-]+)" }
      }
    }
    
    # Extract amount if present
    if [message] =~ /\$[0-9,]+\.?[0-9]*/ {
      grok {
        match => { "message" => "\$(?<amount>[0-9,]+\.?[0-9]*)" }
      }
      
      if [amount] {
        mutate {
          convert => { "amount" => "float" }
        }
      }
    }
  }
  
  # Parse authentication logs
  if [message] =~ /Login|Authentication|Auth/ {
    mutate {
      add_field => { "log_category" => "authentication" }
    }
    
    # Extract username if present
    if [message] =~ /user[:\s]+\w+/ {
      grok {
        match => { "message" => "user[:\s]+(?<username>\w+)" }
      }
    }
    
    # Extract IP address if present
    if [message] =~ /IP[:\s]+[0-9.]+/ {
      grok {
        match => { "message" => "IP[:\s]+(?<clientIp>[0-9.]+)" }
      }
    }
  }
  
  # Parse error logs
  if [level] == "ERROR" {
    mutate {
      add_field => { "log_category" => "error" }
    }
    
    # Extract error codes if present
    if [message] =~ /[A-Z_]+_ERROR|[A-Z_]+_FAILURE/ {
      grok {
        match => { "message" => "(?<errorCode>[A-Z_]+_(?:ERROR|FAILURE))" }
      }
    }
  }
  
  # Parse performance logs
  if [message] =~ /Duration|took|ms/ {
    mutate {
      add_field => { "log_category" => "performance" }
    }
    
    # Extract processing time
    if [message] =~ /[0-9]+ms/ {
      grok {
        match => { "message" => "(?<processingTimeMs>[0-9]+)ms" }
      }
      
      if [processingTimeMs] {
        mutate {
          convert => { "processingTimeMs" => "integer" }
        }
      }
    }
  }
  
  # Add environment information
  mutate {
    add_field => { 
      "environment" => "${ENVIRONMENT:development}"
      "cluster" => "payment-engine"
      "region" => "${AZURE_REGION:eastus}"
    }
  }
  
  # Remove sensitive information
  mutate {
    remove_field => [ "password", "token", "secret", "key" ]
  }
}

output {
  # Send to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "%{[@metadata][index_prefix]}-%{+yyyy.MM.dd}"
    document_type => "%{[@metadata][doc_type]}"
    template_name => "payment-engine-logs"
    template_pattern => "payment-engine-logs-*"
    template_overwrite => true
    template => "/usr/share/logstash/templates/payment-engine-template.json"
  }
  
  # Debug output (remove in production)
  if [@metadata][debug] {
    stdout {
      codec => rubydebug
    }
  }
}