# Production Profile Configuration
# This profile can be activated with: -Dspring.profiles.active=prod
# It complements or overrides the 'production' profile in application.yml
spring:
  config:
    activate:
      on-profile: prod
  
  datasource:
    url: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
    username: ${DB_USER}
    password: ${DB_PASSWORD}
    hikari:
      maximum-pool-size: 50
      minimum-idle: 10
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      pool-name: PaymentProcessingHikariCP
  
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        use_sql_comments: false
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
  
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    consumer:
      group-id: payment-processing-${INSTANCE_ID:1}
      auto-offset-reset: latest
      enable-auto-commit: false
      max-poll-records: 100
    producer:
      acks: all
      retries: 2147483647  # Max retries
      max-in-flight-requests-per-connection: 5
      enable-idempotence: true
      compression-type: snappy
      batch-size: 16384
      linger-ms: 10
      buffer-memory: 33554432
    topic:
      partitions: ${KAFKA_TOPIC_PARTITIONS:3}
      replication-factor: ${KAFKA_TOPIC_REPLICATION_FACTOR:3}  # 3 replicas in prod
      min-insync-replicas: ${KAFKA_TOPIC_MIN_INSYNC_REPLICAS:2}
    properties:
      max.poll.interval.ms: 300000
      session.timeout.ms: 30000
      heartbeat.interval.ms: 3000
  
  redis:
    host: ${REDIS_HOST}
    port: ${REDIS_PORT}
    password: ${REDIS_PASSWORD:}
    ssl: true
    timeout: 5000ms
    lettuce:
      pool:
        max-active: 20
        max-idle: 10
        min-idle: 5
        max-wait: 2000ms

# Server Configuration
server:
  port: ${SERVER_PORT:8080}
  shutdown: graceful
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
  tomcat:
    threads:
      max: 200
      min-spare: 20
    max-connections: 10000
    accept-count: 100
    connection-timeout: 20s
    max-http-form-post-size: 2MB

# Management & Actuator
management:
  server:
    port: ${MANAGEMENT_PORT:8081}
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      probes:
        enabled: true
      show-details: when-authorized
      group:
        liveness:
          include: livenessState,diskSpace
        readiness:
          include: readinessState,db,kafka,redis
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true
    db:
      enabled: true
    diskspace:
      enabled: true
      threshold: 10MB
  metrics:
    tags:
      application: ${spring.application.name}
      environment: ${ENVIRONMENT:prod}
      instance: ${INSTANCE_ID:unknown}
      region: ${CLOUD_REGION:unknown}
    distribution:
      percentiles-histogram:
        http.server.requests: true
      slo:
        http.server.requests: 50ms,100ms,200ms,500ms,1s,2s
    export:
      prometheus:
        enabled: true
        step: 1m
  info:
    env:
      enabled: true
    build:
      enabled: true
    git:
      enabled: true
      mode: full
  tracing:
    sampling:
      probability: 0.1  # 10% sampling in prod

# Logging - JSON Format with MDC
logging:
  level:
    root: WARN
    com.paymentengine: INFO
    org.springframework: WARN
    org.hibernate: WARN
    io.micrometer: WARN
  pattern:
    console: ""  # JSON logging handled by logback-spring.xml
  file:
    name: /var/log/payment-processing/application.log
  logback:
    rollingpolicy:
      max-file-size: 100MB
      max-history: 30
      total-size-cap: 3GB

# Resilience4j
resilience4j:
  circuitbreaker:
    instances:
      kafkaProducer:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 30s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10
      coreBanking:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 60s
  
  retry:
    instances:
      kafkaProducer:
        maxAttempts: 3
        waitDuration: 1s
        retryExceptions:
          - org.springframework.kafka.KafkaException
      coreBanking:
        maxAttempts: 3
        waitDuration: 2s
        exponentialBackoffMultiplier: 2
  
  timelimiter:
    instances:
      default:
        timeoutDuration: 5s

# OpenTelemetry
otel:
  service:
    name: ${spring.application.name}
  traces:
    exporter: jaeger
  metrics:
    exporter: prometheus
  logs:
    exporter: otlp
  exporter:
    jaeger:
      endpoint: ${JAEGER_ENDPOINT:http://jaeger:14250}
    otlp:
      endpoint: ${OTLP_ENDPOINT:http://otel-collector:4317}
spring:
  datasource:
    url: ${PROD_DATABASE_URL:jdbc:postgresql://payment-db.prod.svc.cluster.local:5432/payment_engine}
    username: ${PROD_DATABASE_USERNAME:payment_engine}
    password: ${PROD_DATABASE_PASSWORD:change-me}
  kafka:
    bootstrap-servers: ${PROD_KAFKA_BOOTSTRAP_SERVERS:kafka.prod.svc.cluster.local:9092}

features:
  kafka:
    enabled: true
  fraud:
    enabled: true
  validation:
    heavy:
      enabled: true
