# Core Banking Service Configuration

server:
  port: 8081
  servlet:
    context-path: /core-banking
  compression:
    enabled: true
  http2:
    enabled: true

spring:
  application:
    name: core-banking-service
  
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:local}

# Multi-tenancy configuration
tenancy:
  enabled: ${TENANCY_ENABLED:true}
  default-tenant: ${TENANCY_DEFAULT_TENANT:default}
  isolation-level: ROW_LEVEL_SECURITY

# Configuration service settings
config:
  service:
    enabled: ${CONFIG_SERVICE_ENABLED:true}
    cache:
      enabled: true
      ttl: 3600
  validation:
    enabled: true

# Feature flags
feature-flags:
  enabled: ${FEATURE_FLAGS_ENABLED:true}
  cache:
    enabled: true
    ttl: 300
  
  # Database Configuration
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/payment_engine}
    username: ${DATABASE_USERNAME:payment_user}
    password: ${DATABASE_PASSWORD:payment_pass}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 60000
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 25
          order_inserts: true
          order_updates: true
        connection:
          provider_disables_autocommit: true
        query:
          in_clause_parameter_padding: true
        cache:
          use_second_level_cache: false
    open-in-view: false
  
  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      batch-size: 16384
      linger-ms: 5
      buffer-memory: 33554432
      properties:
        enable.idempotence: true
        max.in.flight.requests.per.connection: 5
        compression.type: snappy
    consumer:
      group-id: ${KAFKA_CONSUMER_GROUP:core-banking-service}
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: "com.paymentengine.shared.event"
        spring.json.use.type.headers: true
        max.poll.records: 500
        fetch.min.bytes: 1024
        fetch.max.wait.ms: 500
      enable-auto-commit: false
    listener:
      ack-mode: manual_immediate
      concurrency: 3
  
  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
  
  # Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: 600000
      cache-null-values: false
  
  # Security Configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: ${JWT_JWK_SET_URI:}
          issuer-uri: ${JWT_ISSUER_URI:}

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env,beans
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
    metrics:
      enabled: true
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}
      environment: ${ENVIRONMENT:local}
    distribution:
      percentiles-histogram:
        http.server.requests: true
      slo:
        http.server.requests: 10ms,50ms,100ms,200ms,500ms,1s,2s,5s
  health:
    db:
      enabled: true
    kafka:
      enabled: true
    redis:
      enabled: true
  info:
    env:
      enabled: true
    git:
      enabled: true
    build:
      enabled: true

# Logging Configuration
logging:
  level:
    com.paymentengine: ${LOG_LEVEL:INFO}
    org.springframework.kafka: WARN
    org.hibernate.SQL: ${SQL_LOG_LEVEL:WARN}
    org.hibernate.type.descriptor.sql.BasicBinder: ${SQL_LOG_LEVEL:WARN}
    org.springframework.security: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{correlationId}] %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{correlationId}] %logger{36} - %msg%n"
  file:
    name: ${LOG_FILE:logs/core-banking.log}

# gRPC Configuration
grpc:
  server:
    port: ${GRPC_PORT:9091}
    enable-reflection: true
  client:
    GLOBAL:
      negotiation-type: plaintext

# Application Specific Configuration
payment-engine:
  transaction:
    default-timeout-minutes: 30
    max-retry-attempts: 3
    duplicate-check-window-minutes: 5
    reference-generation:
      use-uuid-based: true
      include-timestamp: true
  
  validation:
    strict-mode: ${STRICT_VALIDATION:true}
    max-amount-per-transaction: ${MAX_TRANSACTION_AMOUNT:1000000.00}
    daily-limit-per-account: ${DAILY_ACCOUNT_LIMIT:50000.00}
    enable-specific-exceptions: true
  
  processing:
    async-processing-enabled: true
    batch-processing-size: 100
    processing-thread-pool-size: 10
    database-locking:
      consistent-order: true
      deadlock-prevention: true
  
  monitoring:
    enable-metrics: true
    enable-tracing: true
    sample-rate: 0.1
    error-tracking:
      enable-error-codes: true
      track-transaction-references: true

# Environment Specific Configurations
---
spring:
  config:
    activate:
      on-profile: local
  
  datasource:
    url: jdbc:postgresql://localhost:5432/payment_engine
    username: payment_user
    password: payment_pass
  
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: validate

logging:
  level:
    com.paymentengine: DEBUG
    org.hibernate.SQL: DEBUG

payment-engine:
  validation:
    strict-mode: false

---
spring:
  config:
    activate:
      on-profile: docker
  
  datasource:
    url: jdbc:postgresql://postgres:5432/payment_engine
  
  kafka:
    bootstrap-servers: kafka:29092
  
  data:
    redis:
      host: redis

---
spring:
  config:
    activate:
      on-profile: production
  
  datasource:
    url: ${DATABASE_URL}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}
    hikari:
      maximum-pool-size: 50
      minimum-idle: 10
  
  jpa:
    show-sql: false
  
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    producer:
      acks: all
      retries: 5
    consumer:
      properties:
        max.poll.records: 100
  
logging:
  level:
    com.paymentengine: INFO
    org.hibernate.SQL: WARN

payment-engine:
  validation:
    strict-mode: true
  processing:
    processing-thread-pool-size: 20