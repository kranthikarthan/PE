@startuml SERVICE_MESH_TOPOLOGY
!theme plain
title Service Mesh Topology

package "Istio Control Plane" {
    [Pilot] as P
    [Citadel] as C
    [Galley] as G
    [Mixer] as M
}

package "Data Plane" {
    [Envoy Proxy] as EP1
    [Envoy Proxy] as EP2
    [Envoy Proxy] as EP3
    [Envoy Proxy] as EP4
    [Envoy Proxy] as EP5
}

package "Services" {
    [API Gateway] as AG
    [Auth Service] as AS
    [Config Service] as CS
    [Payment Processing Service] as MS
    [Database] as DB
}

package "External Systems" {
    [Clearing Systems] as CS2
    [Payment Schemes] as PS
}

' Control plane connections
P --> EP1
P --> EP2
P --> EP3
P --> EP4
P --> EP5

C --> EP1
C --> EP2
C --> EP3
C --> EP4
C --> EP5

G --> P
G --> C
G --> M

' Data plane connections
EP1 --> AG
EP2 --> AS
EP3 --> CS
EP4 --> MS
EP5 --> DB

' Service connections
AG --> EP2
AG --> EP3
AG --> EP4
MS --> EP5
MS --> CS2
MS --> PS

' Service mesh features
note right of P
Pilot:
- Service discovery
- Traffic management
- Load balancing
- Circuit breaking
- Retry logic
- Timeout management
end note

note right of C
Citadel:
- Certificate management
- mTLS enforcement
- Identity management
- Security policies
end note

note right of G
Galley:
- Configuration validation
- Configuration distribution
- Configuration management
end note

note right of M
Mixer:
- Policy enforcement
- Telemetry collection
- Metrics collection
- Logging
end note

' Envoy proxy features
note right of EP1
Envoy Proxy:
- Service mesh sidecar
- Traffic interception
- Policy enforcement
- Observability
- Security
end note

' Service mesh benefits
note bottom
Service Mesh Benefits:
- Automatic mTLS
- Traffic management
- Observability
- Security
- Service discovery
- Load balancing
- Circuit breaking
- Retry logic
- Timeout management
- Fault injection
- A/B testing
- Canary deployments
end note

@enduml