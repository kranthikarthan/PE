# Istio Conflict Resolution Configuration
# This configuration provides automatic conflict resolution for multi-tenant deployments

---
# Conflict Resolution ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: istio-conflict-resolution
  namespace: payment-engine
  labels:
    app: payment-engine
    component: conflict-resolution
    version: v1
data:
  # Conflict resolution rules
  conflict-rules.yaml: |
    # Rules for resolving conflicts in multi-tenant environments
    rules:
      # Host-based routing priority
      host-routing:
        priority: 1
        description: "Host-based routing takes highest priority"
        resolution: "Use tenant-specific subdomains"
        
      # Port conflict resolution
      port-conflicts:
        priority: 2
        description: "Resolve port conflicts by using different hosts"
        resolution: "Assign unique hosts per tenant"
        
      # Gateway conflicts
      gateway-conflicts:
        priority: 3
        description: "Resolve gateway conflicts by tenant isolation"
        resolution: "Create separate gateways per tenant"
        
      # VirtualService conflicts
      virtual-service-conflicts:
        priority: 4
        description: "Resolve VirtualService conflicts by host matching"
        resolution: "Use specific host matching in VirtualServices"
        
      # DestinationRule conflicts
      destination-rule-conflicts:
        priority: 5
        description: "Resolve DestinationRule conflicts by subset isolation"
        resolution: "Use tenant-specific subsets"
        
      # Security policy conflicts
      security-policy-conflicts:
        priority: 6
        description: "Resolve security policy conflicts by tenant isolation"
        resolution: "Create tenant-specific security policies"

  # Tenant isolation rules
  tenant-isolation.yaml: |
    # Rules for tenant isolation
    isolation:
      # Network isolation
      network:
        enabled: true
        description: "Isolate tenant traffic at network level"
        rules:
          - "Each tenant gets unique host"
          - "Tenant-specific gateways"
          - "Tenant-specific VirtualServices"
          
      # Security isolation
      security:
        enabled: true
        description: "Isolate tenant security policies"
        rules:
          - "Tenant-specific PeerAuthentication"
          - "Tenant-specific AuthorizationPolicy"
          - "Tenant-specific RequestAuthentication"
          
      # Resource isolation
      resources:
        enabled: true
        description: "Isolate tenant resources"
        rules:
          - "Tenant-specific DestinationRules"
          - "Tenant-specific subsets"
          - "Tenant-specific load balancing"

  # Conflict detection rules
  conflict-detection.yaml: |
    # Rules for detecting conflicts
    detection:
      # Host conflicts
      host-conflicts:
        enabled: true
        check: "Duplicate hosts in VirtualServices"
        action: "Create tenant-specific hosts"
        
      # Port conflicts
      port-conflicts:
        enabled: true
        check: "Same port on same host"
        action: "Use different hosts or ports"
        
      # Gateway conflicts
      gateway-conflicts:
        enabled: true
        check: "Overlapping gateway configurations"
        action: "Create separate gateways"
        
      # Security conflicts
      security-conflicts:
        enabled: true
        check: "Overlapping security policies"
        action: "Create tenant-specific policies"

---
# Conflict Resolution Service
apiVersion: v1
kind: Service
metadata:
  name: istio-conflict-resolution
  namespace: payment-engine
  labels:
    app: payment-engine
    component: conflict-resolution
    version: v1
spec:
  selector:
    app: istio-conflict-resolution
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  type: ClusterIP

---
# Conflict Resolution Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: istio-conflict-resolution
  namespace: payment-engine
  labels:
    app: payment-engine
    component: conflict-resolution
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: istio-conflict-resolution
  template:
    metadata:
      labels:
        app: istio-conflict-resolution
        version: v1
    spec:
      serviceAccountName: istio-conflict-resolution
      containers:
      - name: conflict-resolution
        image: istio-conflict-resolution:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: NAMESPACE
          value: "payment-engine"
        - name: LOG_LEVEL
          value: "info"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: config
          mountPath: /etc/conflict-resolution
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: istio-conflict-resolution

---
# Conflict Resolution ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-conflict-resolution
  namespace: payment-engine
  labels:
    app: payment-engine
    component: conflict-resolution
    version: v1

---
# Conflict Resolution ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: istio-conflict-resolution
  labels:
    app: payment-engine
    component: conflict-resolution
    version: v1
rules:
- apiGroups: ["networking.istio.io"]
  resources: ["gateways", "virtualservices", "destinationrules"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["security.istio.io"]
  resources: ["peerauthentications", "authorizationpolicies", "requestauthentications"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["secrets", "configmaps", "services"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]

---
# Conflict Resolution ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: istio-conflict-resolution
  labels:
    app: payment-engine
    component: conflict-resolution
    version: v1
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-conflict-resolution
subjects:
- kind: ServiceAccount
  name: istio-conflict-resolution
  namespace: payment-engine

---
# Conflict Resolution NetworkPolicy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: istio-conflict-resolution-netpol
  namespace: payment-engine
  labels:
    app: payment-engine
    component: conflict-resolution
    version: v1
spec:
  podSelector:
    matchLabels:
      app: istio-conflict-resolution
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    - namespaceSelector:
        matchLabels:
          name: payment-engine
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    - namespaceSelector:
        matchLabels:
          name: payment-engine
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80