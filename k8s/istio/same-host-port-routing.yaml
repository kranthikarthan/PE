# Same Host/Port Routing Solution
# This configuration handles the scenario where multiple tenants call the same
# external host:port (bank's NGINX:443) but need different routing based on context

---
# ServiceEntry for Bank's NGINX (Single Entry Point)
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: bank-nginx-single-entry
  namespace: payment-engine
  labels:
    app: payment-engine
    component: service-entry
    external-service: bank-nginx
    routing-type: same-host-port
    version: v1
spec:
  hosts:
  - bank-nginx.example.com  # Bank's NGINX host (same for all tenants)
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  location: MESH_EXTERNAL
  resolution: DNS

---
# VirtualService for Same Host/Port Routing
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: same-host-port-routing
  namespace: payment-engine
  labels:
    app: payment-engine
    component: virtual-service
    routing-type: same-host-port
    version: v1
spec:
  hosts:
  - bank-nginx.example.com
  http:
  # Tenant-001 Fraud System Routing
  - match:
    - headers:
        x-tenant-id:
          exact: "tenant-001"
        x-service-type:
          exact: "fraud"
    route:
    - destination:
        host: bank-nginx.example.com
        port:
          number: 443
    headers:
      request:
        set:
          X-Tenant-ID: "tenant-001"
          X-Service-Type: "fraud"
          X-Route-Context: "tenant-001-fraud"
          X-Downstream-Route: "fraud-system"
          X-Bank-Route: "/fraud/tenant-001"
    timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s
    fault:
      delay:
        percentage:
          value: 0.1
        fixedDelay: 1s
  # Tenant-001 Clearing System Routing
  - match:
    - headers:
        x-tenant-id:
          exact: "tenant-001"
        x-service-type:
          exact: "clearing"
    route:
    - destination:
        host: bank-nginx.example.com
        port:
          number: 443
    headers:
      request:
        set:
          X-Tenant-ID: "tenant-001"
          X-Service-Type: "clearing"
          X-Route-Context: "tenant-001-clearing"
          X-Downstream-Route: "clearing-system"
          X-Bank-Route: "/clearing/tenant-001"
    timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s
  # Tenant-002 Fraud System Routing
  - match:
    - headers:
        x-tenant-id:
          exact: "tenant-002"
        x-service-type:
          exact: "fraud"
    route:
    - destination:
        host: bank-nginx.example.com
        port:
          number: 443
    headers:
      request:
        set:
          X-Tenant-ID: "tenant-002"
          X-Service-Type: "fraud"
          X-Route-Context: "tenant-002-fraud"
          X-Downstream-Route: "fraud-system"
          X-Bank-Route: "/fraud/tenant-002"
    timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s
  # Tenant-002 Clearing System Routing
  - match:
    - headers:
        x-tenant-id:
          exact: "tenant-002"
        x-service-type:
          exact: "clearing"
    route:
    - destination:
        host: bank-nginx.example.com
        port:
          number: 443
    headers:
      request:
        set:
          X-Tenant-ID: "tenant-002"
          X-Service-Type: "clearing"
          X-Route-Context: "tenant-002-clearing"
          X-Downstream-Route: "clearing-system"
          X-Bank-Route: "/clearing/tenant-002"
    timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s
  # Tenant-003 Fraud System Routing
  - match:
    - headers:
        x-tenant-id:
          exact: "tenant-003"
        x-service-type:
          exact: "fraud"
    route:
    - destination:
        host: bank-nginx.example.com
        port:
          number: 443
    headers:
      request:
        set:
          X-Tenant-ID: "tenant-003"
          X-Service-Type: "fraud"
          X-Route-Context: "tenant-003-fraud"
          X-Downstream-Route: "fraud-system"
          X-Bank-Route: "/fraud/tenant-003"
    timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s
  # Tenant-003 Clearing System Routing
  - match:
    - headers:
        x-tenant-id:
          exact: "tenant-003"
        x-service-type:
          exact: "clearing"
    route:
    - destination:
        host: bank-nginx.example.com
        port:
          number: 443
    headers:
      request:
        set:
          X-Tenant-ID: "tenant-003"
          X-Service-Type: "clearing"
          X-Route-Context: "tenant-003-clearing"
          X-Downstream-Route: "clearing-system"
          X-Bank-Route: "/clearing/tenant-003"
    timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s
  # Default routing for unknown tenants
  - match:
    - headers:
        x-tenant-id:
          regex: "tenant-.*"
    route:
    - destination:
        host: bank-nginx.example.com
        port:
          number: 443
    headers:
      request:
        set:
          X-Downstream-Route: "default"
          X-Bank-Route: "/default"
    timeout: 30s
    retries:
      attempts: 2
      perTryTimeout: 10s

---
# DestinationRule for Bank's NGINX with Tenant-Aware Configuration
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: bank-nginx-same-host-port-dr
  namespace: payment-engine
  labels:
    app: payment-engine
    component: destination-rule
    external-service: bank-nginx
    routing-type: same-host-port
    version: v1
spec:
  host: bank-nginx.example.com
  trafficPolicy:
    connectionPool:
      tcp:
        maxConnections: 200
        connectTimeout: 30s
      http:
        http1MaxPendingRequests: 20
        http2MaxRequests: 200
        maxRequestsPerConnection: 2
        maxRetries: 3
        h2UpgradePolicy: UPGRADE
    circuitBreaker:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
      minHealthPercent: 30
    outlierDetection:
      consecutive5xxErrors: 5
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
      minHealthPercent: 30
    loadBalancer:
      simple: LEAST_CONN
  subsets:
  # Fraud system subset
  - name: fraud-system
    labels:
      service-type: fraud
    trafficPolicy:
      connectionPool:
        tcp:
          maxConnections: 100
        http:
          http1MaxPendingRequests: 10
          maxRequestsPerConnection: 2
      circuitBreaker:
        consecutiveErrors: 3
        interval: 30s
        baseEjectionTime: 30s
        maxEjectionPercent: 50
  # Clearing system subset
  - name: clearing-system
    labels:
      service-type: clearing
    trafficPolicy:
      connectionPool:
        tcp:
          maxConnections: 100
        http:
          http1MaxPendingRequests: 10
          maxRequestsPerConnection: 2
      circuitBreaker:
        consecutiveErrors: 3
        interval: 30s
        baseEjectionTime: 30s
        maxEjectionPercent: 50
  # Default subset
  - name: default
    labels:
      service-type: default
    trafficPolicy:
      connectionPool:
        tcp:
          maxConnections: 50
        http:
          http1MaxPendingRequests: 5
          maxRequestsPerConnection: 2

---
# AuthorizationPolicy for Downstream Routing Security
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: downstream-routing-authz
  namespace: payment-engine
  labels:
    app: payment-engine
    component: security
    routing-type: downstream
    version: v1
spec:
  selector:
    matchLabels:
      app: payment-engine
  rules:
  # Allow payment processing service to call fraud system
  - from:
    - source:
        principals: ["cluster.local/ns/payment-engine/sa/payment-processing-service"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
        hosts: ["bank-nginx.example.com"]
    when:
    - key: request.headers[x-service-type]
      values: ["fraud"]
  # Allow payment processing service to call clearing system
  - from:
    - source:
        principals: ["cluster.local/ns/payment-engine/sa/payment-processing-service"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
        hosts: ["bank-nginx.example.com"]
    when:
    - key: request.headers[x-service-type]
      values: ["clearing"]
  # Allow core banking service to call external services
  - from:
    - source:
        principals: ["cluster.local/ns/payment-engine/sa/core-banking-service"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
        hosts: ["bank-nginx.example.com"]
  # Deny cross-tenant access
  - from:
    - source:
        principals: ["cluster.local/ns/payment-engine/sa/payment-processing-service"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
        hosts: ["bank-nginx.example.com"]
    when:
    - key: request.headers[x-tenant-id]
      values: ["tenant-001", "tenant-002", "tenant-003"]
    # This rule ensures tenant isolation

---
# PeerAuthentication for Downstream Calls
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: downstream-calls-peer-auth
  namespace: payment-engine
  labels:
    app: payment-engine
    component: security
    routing-type: downstream
    version: v1
spec:
  selector:
    matchLabels:
      app: payment-engine
  mtls:
    mode: STRICT
  portLevelMtls:
    443:
      mode: STRICT
    80:
      mode: PERMISSIVE