name: PR Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

env:
  MAVEN_OPTS: "-Xmx2048m -XX:+UseG1GC"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"

jobs:
  # =============================================================================
  # FAST FEEDBACK - Quick validation for PRs
  # =============================================================================
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Validate code formatting
      run: mvn $MAVEN_CLI_OPTS spotless:check
      continue-on-error: false
    
    - name: Validate code style
      run: mvn $MAVEN_CLI_OPTS checkstyle:check
      continue-on-error: false
    
    - name: Compile all modules
      run: mvn $MAVEN_CLI_OPTS clean compile
      env:
        CI: true
    
    - name: Run unit tests
      run: mvn $MAVEN_CLI_OPTS test
      env:
        CI: true
        TESTCONTAINERS_RYUK_DISABLED: true
    
    - name: Comment PR with results
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('## 🔍 PR Validation Results')
          );
          
          const status = '${{ job.status }}';
          const emoji = status === 'success' ? '✅' : '❌';
          const result = status === 'success' ? 'PASSED' : 'FAILED';
          
          const body = `## 🔍 PR Validation Results
          
          ${emoji} **Status**: ${result}
          
          ### Quality Gates
          - ✅ Code formatting (Spotless)
          - ✅ Code style (Checkstyle)  
          - ✅ Compilation
          - ✅ Unit tests
          
          ${status === 'success' ? 
            '🎉 All validation checks passed! This PR is ready for review.' : 
            '❌ Some validation checks failed. Please review the logs and fix the issues.'}
          
          ---
          *This comment will be updated on each push to the PR.*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }
