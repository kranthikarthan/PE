name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  MAVEN_OPTS: "-Xmx2048m -XX:+UseG1GC"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"

jobs:
  # =============================================================================
  # QUALITY GATES - Fast feedback for code quality issues
  # =============================================================================
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Code formatting check (Spotless)
      run: mvn $MAVEN_CLI_OPTS spotless:check
      continue-on-error: false
    
    - name: Code style check (Checkstyle)
      run: mvn $MAVEN_CLI_OPTS checkstyle:check
      continue-on-error: false
    
    - name: Static analysis (SpotBugs)
      run: mvn $MAVEN_CLI_OPTS spotbugs:check
      continue-on-error: false
    
    - name: Security scan (OWASP Dependency Check)
      run: mvn $MAVEN_CLI_OPTS org.owasp:dependency-check-maven:check
      continue-on-error: false

  # =============================================================================
  # COMPILATION - Ensure all modules compile successfully
  # =============================================================================
  compile:
    name: Compile All Modules
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality-gates
    
    strategy:
      matrix:
        java-version: ['17', '21']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Compile all modules
      run: mvn $MAVEN_CLI_OPTS clean compile
      env:
        CI: true

  # =============================================================================
  # UNIT TESTS - Fast unit tests with parallel execution
  # =============================================================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: quality-gates
    
    strategy:
      matrix:
        module: [
          'domain-models',
          'contracts', 
          'shared-telemetry',
          'shared-config',
          'payment-initiation-service',
          'validation-service',
          'account-adapter-service',
          'routing-service',
          'transaction-processing-service',
          'saga-orchestrator'
        ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run unit tests for ${{ matrix.module }}
      run: mvn $MAVEN_CLI_OPTS clean test -pl ${{ matrix.module }}
      env:
        CI: true
        TESTCONTAINERS_RYUK_DISABLED: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.module }}
        path: ${{ matrix.module }}/target/surefire-reports/

  # =============================================================================
  # INTEGRATION TESTS - Full integration tests with real infrastructure
  # =============================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [compile, unit-tests]
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run integration tests
      run: mvn $MAVEN_CLI_OPTS clean verify -Pintegration-tests
      env:
        CI: true
        SPRING_PROFILES_ACTIVE: test
        POSTGRES_URL: jdbc:postgresql://localhost:5432/test
        POSTGRES_USER: test
        POSTGRES_PASSWORD: test
        REDIS_URL: redis://localhost:6379
        TESTCONTAINERS_RYUK_DISABLED: true
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: */target/surefire-reports/

  # =============================================================================
  # COVERAGE ANALYSIS - Test coverage reporting
  # =============================================================================
  coverage:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [unit-tests, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Generate coverage report
      run: mvn $MAVEN_CLI_OPTS clean test jacoco:report
      env:
        CI: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: */target/site/jacoco/

  # =============================================================================
  # BUILD & PACKAGE - Create deployable artifacts
  # =============================================================================
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [compile, unit-tests, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Build all modules
      run: mvn $MAVEN_CLI_OPTS clean package -DskipTests
      env:
        CI: true
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          */target/*.jar
          */target/*.war
        retention-days: 7

  # =============================================================================
  # DEPLOYMENT GATES - Pre-deployment validation
  # =============================================================================
  deployment-gates:
    name: Deployment Gates
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build, coverage]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Validate deployment readiness
      run: |
        echo "✅ All quality gates passed"
        echo "✅ All tests passed"
        echo "✅ Build successful"
        echo "✅ Coverage thresholds met"
        echo "🚀 Ready for deployment!"

  # =============================================================================
  # NOTIFICATION - Send results to team
  # =============================================================================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [deployment-gates]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.deployment-gates.result == 'success'
      run: |
        echo "🎉 CI/CD Pipeline completed successfully!"
        echo "✅ All quality gates passed"
        echo "✅ All tests passed"
        echo "✅ Build artifacts created"
        echo "🚀 Ready for deployment!"
    
    - name: Notify failure
      if: needs.deployment-gates.result == 'failure'
      run: |
        echo "❌ CI/CD Pipeline failed!"
        echo "Please check the logs for details."
        exit 1
