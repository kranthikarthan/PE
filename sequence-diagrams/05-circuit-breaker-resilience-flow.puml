@startuml CIRCUIT_BREAKER_RESILIENCE_FLOW
!theme plain
title Circuit Breaker & Resilience Patterns Flow

actor Client as C
participant "API Gateway" as AG
participant "Payment Processing Service" as MS
participant "Clearing System" as CS
participant "Circuit Breaker" as CB
participant "Retry Service" as RS
participant "Bulkhead" as BH
participant "Rate Limiter" as RL
participant "Monitoring" as M

== Circuit Breaker States & Transitions ==

== State: CLOSED (Normal Operation) ==

C -> AG: POST /api/v1/iso20022/comprehensive/pain001
AG -> CB: Check Circuit Breaker State
note right: Service: clearing-system\nState: CLOSED\nFailure Rate: 15%\nThreshold: 50%

CB --> AG: State: CLOSED
AG -> MS: Forward Request
MS -> CS: POST PACS.008 to Clearing System

alt Request Successful
    CS --> MS: Return PACS.002 Success
    MS -> CB: Record Success
    note right: Success Count: +1\nFailure Count: 0\nFailure Rate: 10%\nState: CLOSED
    
    CB -> M: Update Circuit Breaker Metrics
    note right: Metrics:\n- circuit_breaker_state: 0 (CLOSED)\n- circuit_breaker_success_total: +1\n- circuit_breaker_failure_rate: 10%
    
    MS --> AG: Return Success Response
    AG --> C: Return PAIN.002 Response
    
else Request Failed
    CS --> MS: Return Error Response
    MS -> CB: Record Failure
    note right: Success Count: 0\nFailure Count: +1\nFailure Rate: 20%\nState: CLOSED
    
    CB -> M: Update Circuit Breaker Metrics
    note right: Metrics:\n- circuit_breaker_state: 0 (CLOSED)\n- circuit_breaker_failure_total: +1\n- circuit_breaker_failure_rate: 20%
    
    MS -> RS: Apply Retry Logic
    RS -> RS: Check Retry Configuration
    note right: Max Attempts: 3\nWait Duration: 1s\nBackoff Multiplier: 2
    
    RS -> CS: Retry Request
    CS --> RS: Return Success Response
    RS --> MS: Return Success Response
    MS --> AG: Return Success Response
    AG --> C: Return PAIN.002 Response
end

== State: OPEN (Circuit Breaker Activated) ==

C -> AG: POST /api/v1/iso20022/comprehensive/pain001
AG -> CB: Check Circuit Breaker State
note right: Service: clearing-system\nState: OPEN\nFailure Rate: 60%\nThreshold: 50%\nWait Duration: 30s

CB --> AG: State: OPEN
AG -> CB: Record Circuit Breaker Call
note right: Call Type: BLOCKED\nReason: Circuit breaker OPEN\nFallback: true

CB -> M: Update Circuit Breaker Metrics
note right: Metrics:\n- circuit_breaker_state: 1 (OPEN)\n- circuit_breaker_calls_blocked_total: +1\n- circuit_breaker_failure_rate: 60%

AG -> AG: Return Fallback Response
AG --> C: Return 503 Service Unavailable
note right: Status: 503\nMessage: "Service temporarily unavailable"\nRetry After: 30s\nFallback: true

== State: HALF_OPEN (Testing Recovery) ==

note over CB: Wait Duration Expired (30s)

CB -> CB: Transition to HALF_OPEN
note right: State: HALF_OPEN\nPermitted Calls: 3\nTest Period: Active

CB -> M: Update Circuit Breaker Metrics
note right: Metrics:\n- circuit_breaker_state: 2 (HALF_OPEN)\n- circuit_breaker_state_transitions_total: +1

C -> AG: POST /api/v1/iso20022/comprehensive/pain001
AG -> CB: Check Circuit Breaker State
CB --> AG: State: HALF_OPEN (Permitted)

AG -> MS: Forward Request (Test Call)
MS -> CS: POST PACS.008 to Clearing System

alt Test Call Successful
    CS --> MS: Return PACS.002 Success
    MS -> CB: Record Success
    note right: Success Count: +1\nFailure Count: 0\nTest Calls: 1/3\nState: HALF_OPEN
    
    CB -> CB: Check Recovery Criteria
    note right: Success Rate: 100%\nTest Calls: 1/3\nRecovery Threshold: 2/3
    
    CB -> CB: Transition to CLOSED
    note right: State: CLOSED\nRecovery: Successful\nFailure Rate: 0%
    
    CB -> M: Update Circuit Breaker Metrics
    note right: Metrics:\n- circuit_breaker_state: 0 (CLOSED)\n- circuit_breaker_recovery_total: +1\n- circuit_breaker_failure_rate: 0%
    
    MS --> AG: Return Success Response
    AG --> C: Return PAIN.002 Response
    
else Test Call Failed
    CS --> MS: Return Error Response
    MS -> CB: Record Failure
    note right: Success Count: 0\nFailure Count: +1\nTest Calls: 1/3\nState: HALF_OPEN
    
    CB -> CB: Transition to OPEN
    note right: State: OPEN\nRecovery: Failed\nWait Duration: 30s
    
    CB -> M: Update Circuit Breaker Metrics
    note right: Metrics:\n- circuit_breaker_state: 1 (OPEN)\n- circuit_breaker_failure_total: +1\n- circuit_breaker_failure_rate: 100%
    
    AG -> AG: Return Fallback Response
    AG --> C: Return 503 Service Unavailable
end

== Retry Logic with Exponential Backoff ==

C -> AG: POST /api/v1/iso20022/comprehensive/pain001
AG -> MS: Forward Request
MS -> RS: Apply Retry Logic

RS -> RS: Initialize Retry Configuration
note right: Max Attempts: 3\nInitial Wait: 1s\nBackoff Multiplier: 2\nMax Wait: 5s

RS -> CS: Attempt 1: POST PACS.008
CS --> RS: Return Error Response
note right: Error: Connection timeout\nStatus: 500

RS -> RS: Calculate Wait Time
note right: Attempt: 1\nWait Time: 1s\nNext Attempt: 2

RS -> RS: Wait (1 second)
RS -> CS: Attempt 2: POST PACS.008
CS --> RS: Return Error Response
note right: Error: Connection timeout\nStatus: 500

RS -> RS: Calculate Wait Time
note right: Attempt: 2\nWait Time: 2s (1s * 2)\nNext Attempt: 3

RS -> RS: Wait (2 seconds)
RS -> CS: Attempt 3: POST PACS.008

alt Final Attempt Successful
    CS --> RS: Return Success Response
    RS -> M: Record Retry Success
    note right: Metrics:\n- retry_attempts_total: 3\n- retry_success_total: +1\n- retry_duration_seconds: 3.5
    
    RS --> MS: Return Success Response
    MS --> AG: Return Success Response
    AG --> C: Return PAIN.002 Response
    
else Final Attempt Failed
    CS --> RS: Return Error Response
    RS -> M: Record Retry Failure
    note right: Metrics:\n- retry_attempts_total: 3\n- retry_failure_total: +1\n- retry_duration_seconds: 3.5
    
    RS --> MS: Return Retry Exhausted Error
    MS --> AG: Return 500 Internal Server Error
    AG --> C: Return 500 Internal Server Error
    note right: Status: 500\nError: "All retry attempts exhausted"\nAttempts: 3\nDuration: 3.5s
end

== Bulkhead Pattern for Resource Isolation ==

C -> AG: POST /api/v1/iso20022/comprehensive/pain001
AG -> BH: Check Bulkhead Availability
note right: Service: clearing-system\nMax Concurrent Calls: 10\nCurrent Calls: 8\nAvailable: 2

BH --> AG: Available: 2 slots
AG -> MS: Forward Request
MS -> BH: Acquire Bulkhead Slot
note right: Slot Acquired: 9/10\nRemaining: 1

MS -> CS: POST PACS.008 to Clearing System
note right: Bulkhead Slot: 9/10\nIsolation: clearing-system calls

CS --> MS: Return Response
MS -> BH: Release Bulkhead Slot
note right: Slot Released: 8/10\nAvailable: 2

MS --> AG: Return Response
AG --> C: Return Response

== Bulkhead Saturation Scenario ==

C -> AG: POST /api/v1/iso20022/comprehensive/pain001
AG -> BH: Check Bulkhead Availability
note right: Service: clearing-system\nMax Concurrent Calls: 10\nCurrent Calls: 10\nAvailable: 0

BH --> AG: Unavailable: 0 slots
AG -> M: Record Bulkhead Rejection
note right: Metrics:\n- bulkhead_calls_rejected_total: +1\n- bulkhead_available_calls: 0\n- bulkhead_max_calls: 10

AG -> AG: Return Bulkhead Rejection
AG --> C: Return 503 Service Unavailable
note right: Status: 503\nError: "Service capacity exceeded"\nMax Concurrent Calls: 10\nCurrent Calls: 10

== Rate Limiting ==

C -> AG: POST /api/v1/iso20022/comprehensive/pain001
AG -> RL: Check Rate Limits
note right: Client: <client-id>\nLimit: 100 req/sec\nCurrent: 95 req/sec\nWindow: 1 second

RL --> AG: Allowed: 5 remaining
AG -> MS: Forward Request
MS -> RL: Consume Rate Limit Token
note right: Tokens Consumed: 1\nRemaining: 4\nReset Time: <next-second>

MS -> MS: Process Request
MS --> AG: Return Response
AG --> C: Return Response

== Rate Limit Exceeded Scenario ==

C -> AG: POST /api/v1/iso20022/comprehensive/pain001
AG -> RL: Check Rate Limits
note right: Client: <client-id>\nLimit: 100 req/sec\nCurrent: 100 req/sec\nWindow: 1 second

RL --> AG: Rejected: 0 remaining
AG -> M: Record Rate Limit Violation
note right: Metrics:\n- rate_limiter_requests_rejected_total: +1\n- rate_limiter_available_tokens: 0\n- rate_limiter_limit: 100

AG -> AG: Return Rate Limit Error
AG --> C: Return 429 Too Many Requests
note right: Status: 429\nError: "Rate limit exceeded"\nLimit: 100 req/sec\nReset: <next-second>\nRetry-After: 1

== Timeout Management ==

C -> AG: POST /api/v1/iso20022/comprehensive/pain001
AG -> MS: Forward Request
MS -> MS: Start Timeout Timer
note right: Timeout: 30 seconds\nService: clearing-system

MS -> CS: POST PACS.008 to Clearing System

alt Response Within Timeout
    CS --> MS: Return Response (25s)
    MS -> MS: Cancel Timeout Timer
    MS --> AG: Return Response
    AG --> C: Return Response
    
else Response Timeout
    note over CS: No response after 30 seconds
    MS -> MS: Timeout Expired
    MS -> M: Record Timeout
    note right: Metrics:\n- timeout_occurrences_total: +1\n- timeout_duration_seconds: 30\n- service: clearing-system
    
    MS -> MS: Return Timeout Error
    MS --> AG: Return 504 Gateway Timeout
    AG --> C: Return 504 Gateway Timeout
    note right: Status: 504\nError: "Gateway timeout"\nTimeout: 30s\nService: clearing-system
end

== Resilience Patterns Summary ==

note over C,M
Resilience Patterns Implemented:
- Circuit Breaker (CLOSED/OPEN/HALF_OPEN)
- Retry with Exponential Backoff
- Bulkhead for Resource Isolation
- Rate Limiting with Token Bucket
- Timeout Management
- Fallback Mechanisms
- Health Checks
- Graceful Degradation
- Failure Isolation
- Recovery Testing
- Metrics Collection
- Alert Generation
- Automatic Recovery
- Resource Protection
- Load Shedding
- Backpressure Handling
- Service Mesh Integration
- Chaos Engineering Support
- Resilience Testing
- Performance Monitoring
end note

@enduml