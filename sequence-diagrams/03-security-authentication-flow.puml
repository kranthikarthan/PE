@startuml SECURITY_AUTHENTICATION_FLOW
!theme plain
title Security & Authentication Flow with OAuth2/JWT

actor Client as C
participant "API Gateway" as AG
participant "OAuth2 Server" as OAuth
participant "Payment Processing Service" as MS
participant "Security Service" as SS
participant "Audit Service" as AS
participant "Redis Cache" as RC

== OAuth2 Authentication Flow ==

C -> OAuth: POST /oauth/token
note right: Grant Type: client_credentials\nClient ID: <client-id>\nClient Secret: <client-secret>\nScope: iso20022:send

OAuth -> OAuth: Validate Client Credentials
OAuth -> OAuth: Generate JWT Token
note right: Claims:\n- sub: <client-id>\n- scope: iso20022:send\n- exp: <expiration>\n- iat: <issued-at>\n- aud: payment-engine

OAuth --> C: Return JWT Token
note right: Access Token: <jwt-token>\nToken Type: Bearer\nExpires In: 3600\nScope: iso20022:send

== API Request with JWT Authentication ==

C -> AG: POST /api/v1/iso20022/comprehensive/pain001
note right: Authorization: Bearer <jwt-token>\nContent-Type: application/json\nX-Correlation-ID: <correlation-id>

AG -> AG: Extract JWT Token from Header
AG -> AG: Validate JWT Token Format
AG -> AG: Check Token Expiration

alt Token Valid
    AG -> AG: Decode JWT Claims
    note right: Extract:\n- Subject (client-id)\n- Scopes\n- Expiration\n- Issuer
    
    AG -> AG: Validate Required Scopes
    note right: Required: iso20022:send\nPresent: iso20022:send\nValid: true
    
    AG -> AS: Log Authentication Event
    note right: Event: AUTHENTICATION\nAction: TOKEN_VALIDATION\nUser: <client-id>\nSuccess: true\nIP: <client-ip>
    
    AG -> RC: Check Rate Limits
    note right: Key: <client-id>\nLimit: 100 req/sec\nCurrent: 45 req/sec\nAllowed: true
    
    AG -> AG: Apply Circuit Breaker
    note right: Service: iso20022-comprehensive\nState: CLOSED\nFailure Rate: 15%
    
    AG -> MS: Forward Request with Security Context
    note right: Headers:\n- X-User-ID: <client-id>\n- X-Scopes: iso20022:send\n- X-Correlation-ID: <correlation-id>\n- X-Gateway: payment-engine-gateway
    
    MS -> AS: Log Authorization Event
    note right: Event: AUTHORIZATION\nAction: API_ACCESS\nUser: <client-id>\nResource: /api/v1/iso20022/comprehensive/pain001\nSuccess: true
    
    MS -> MS: Process Request
    MS --> AG: Return Response
    AG --> C: Return Success Response
    
else Token Invalid
    AG -> AS: Log Authentication Event
    note right: Event: AUTHENTICATION\nAction: TOKEN_VALIDATION\nUser: <client-id>\nSuccess: false\nError: "Invalid token"
    
    AG --> C: Return 401 Unauthorized
    note right: Status: 401\nError: "Invalid or expired token"\nWWW-Authenticate: Bearer
end

== Message Encryption & Digital Signatures ==

C -> AG: POST /api/v1/iso20022/comprehensive/pain001
note right: Authorization: Bearer <jwt-token>\nContent-Type: application/json\nX-Encrypted: true\nX-Signature: <digital-signature>

AG -> AG: Validate JWT Token
AG -> MS: Forward Request

MS -> SS: Decrypt Message Payload
note right: Algorithm: AES-GCM\nKey: <encryption-key>\nIV: <initialization-vector>

SS -> SS: Decrypt PAIN.001 Message
SS --> MS: Return Decrypted Message

MS -> SS: Verify Digital Signature
note right: Algorithm: SHA256withRSA\nPublic Key: <public-key>\nSignature: <digital-signature>\nMessage: <encrypted-payload>

SS -> SS: Verify Signature
alt Signature Valid
    SS --> MS: Return Verification Success
    MS -> AS: Log Security Event
    note right: Event: SECURITY\nAction: SIGNATURE_VERIFICATION\nSuccess: true\nAlgorithm: SHA256withRSA
    
    MS -> MS: Process Decrypted Message
    MS -> SS: Encrypt Response Message
    SS -> SS: Sign Response Message
    SS --> MS: Return Encrypted & Signed Response
    
    MS --> AG: Return Encrypted Response
    AG --> C: Return Encrypted Response
    note right: Status: 200 OK\nContent-Type: application/json\nX-Encrypted: true\nX-Signature: <response-signature>
    
else Signature Invalid
    SS --> MS: Return Verification Failure
    MS -> AS: Log Security Event
    note right: Event: SECURITY\nAction: SIGNATURE_VERIFICATION\nSuccess: false\nError: "Invalid signature"
    
    MS --> AG: Return Security Error
    AG --> C: Return 400 Bad Request
    note right: Status: 400\nError: "Invalid digital signature"\nSecurity: true
end

== Authorization Scenarios ==

== Scenario: Insufficient Scope ==

C -> AG: POST /api/v1/iso20022/comprehensive/pain001
note right: Authorization: Bearer <jwt-token>\nToken Scope: iso20022:validate\nRequired Scope: iso20022:send

AG -> AG: Validate JWT Token
AG -> AG: Check Required Scopes
note right: Required: iso20022:send\nPresent: iso20022:validate\nValid: false

AG -> AS: Log Authorization Event
note right: Event: AUTHORIZATION\nAction: SCOPE_VALIDATION\nUser: <client-id>\nResource: /api/v1/iso20022/comprehensive/pain001\nSuccess: false\nError: "Insufficient scope"

AG --> C: Return 403 Forbidden
note right: Status: 403\nError: "Insufficient scope"\nRequired: iso20022:send\nPresent: iso20022:validate

== Scenario: Rate Limit Exceeded ==

C -> AG: POST /api/v1/iso20022/comprehensive/pain001
note right: Authorization: Bearer <jwt-token>\nClient: <client-id>

AG -> AG: Validate JWT Token
AG -> RC: Check Rate Limits
note right: Key: <client-id>\nLimit: 100 req/sec\nCurrent: 105 req/sec\nAllowed: false

AG -> AS: Log Security Event
note right: Event: SECURITY\nAction: RATE_LIMIT_EXCEEDED\nUser: <client-id>\nLimit: 100 req/sec\nCurrent: 105 req/sec

AG --> C: Return 429 Too Many Requests
note right: Status: 429\nError: "Rate limit exceeded"\nLimit: 100 req/sec\nReset: <reset-time>\nRetry-After: 1

== Scenario: Token Expired ==

C -> AG: POST /api/v1/iso20022/comprehensive/pain001
note right: Authorization: Bearer <expired-jwt-token>

AG -> AG: Validate JWT Token
AG -> AG: Check Token Expiration
note right: Current Time: <current-time>\nToken Expiration: <expired-time>\nValid: false

AG -> AS: Log Authentication Event
note right: Event: AUTHENTICATION\nAction: TOKEN_VALIDATION\nUser: <client-id>\nSuccess: false\nError: "Token expired"

AG --> C: Return 401 Unauthorized
note right: Status: 401\nError: "Token expired"\nWWW-Authenticate: Bearer\nExpires: <expired-time>

== Security Monitoring & Alerting ==

note over C,AS
Security Monitoring Features:
- Real-time Authentication Monitoring
- Failed Login Attempt Tracking
- Rate Limit Violation Alerts
- Token Expiration Monitoring
- Scope Validation Logging
- Digital Signature Verification
- Message Encryption/Decryption
- Security Event Correlation
- Anomaly Detection
- Threat Intelligence Integration
- Compliance Reporting
- Audit Trail Generation
- Security Metrics Collection
- Alert Generation & Notification
- Incident Response Automation
end note

== Security Metrics & Health Checks ==

AG -> AG: Collect Security Metrics
note right: Metrics:\n- Authentication Success Rate\n- Authorization Failure Rate\n- Rate Limit Violations\n- Token Expiration Rate\n- Signature Verification Rate\n- Encryption/Decryption Performance

AG -> AS: Log Security Metrics
note right: Event: SECURITY_METRICS\nTimestamp: <timestamp>\nMetrics: <security-metrics>

AG -> AG: Check Security Health
note right: Health Checks:\n- OAuth2 Server Connectivity\n- JWT Token Validation\n- Encryption Service Status\n- Signature Verification Service\n- Rate Limiting Service\n- Audit Logging Service

alt Security Health OK
    AG -> AS: Log Security Health Event
    note right: Event: SECURITY_HEALTH\nStatus: HEALTHY\nChecks: All passed
    
else Security Health Degraded
    AG -> AS: Log Security Health Event
    note right: Event: SECURITY_HEALTH\nStatus: DEGRADED\nFailed Checks: <failed-checks>
    
    AG -> AG: Trigger Security Alert
    note right: Alert: Security Service Degraded\nSeverity: WARNING\nAction: Investigate\nNotification: Security Team
end

@enduml