@startuml SERVICE_MESH_ISTIO_FLOW
!theme plain
title Service Mesh with Istio Flow

actor "Client" as C
participant "Load Balancer" as LB
participant "Istio Gateway" as IG
participant "Envoy Proxy" as EP1
participant "API Gateway" as AG
participant "Envoy Proxy" as EP2
participant "Auth Service" as AS
participant "Envoy Proxy" as EP3
participant "Config Service" as CS
participant "Envoy Proxy" as EP4
participant "Middleware Service" as MS
participant "Envoy Proxy" as EP5
participant "Database" as DB
participant "Redis" as R
participant "Kafka" as K

== Request Flow with Service Mesh ==

C -> LB: HTTPS Request
note right: Client request

LB -> IG: Route to Istio Gateway
note right: Load balancer routes to Istio

IG -> IG: Apply Gateway rules
IG -> IG: Check mTLS requirements
IG -> IG: Apply rate limiting

IG -> EP1: Forward to Envoy Proxy
note right: Istio Gateway to Envoy

EP1 -> EP1: Apply sidecar policies
EP1 -> EP1: Check service mesh security
EP1 -> EP1: Apply traffic management

EP1 -> AG: Forward to API Gateway
note right: Envoy to API Gateway

AG -> AG: Process request
AG -> AG: Check authentication

AG -> EP2: Call Auth Service
note right: API Gateway to Auth Service

EP2 -> EP2: Apply sidecar policies
EP2 -> EP2: Check mTLS
EP2 -> EP2: Apply circuit breaker

EP2 -> AS: Forward to Auth Service
AS -> AS: Process authentication
AS --> EP2: Authentication response

EP2 --> AG: Authentication response
AG -> AG: Validate authentication

AG -> EP3: Call Config Service
note right: API Gateway to Config Service

EP3 -> EP3: Apply sidecar policies
EP3 -> EP3: Check mTLS
EP3 -> EP3: Apply retry logic

EP3 -> CS: Forward to Config Service
CS -> CS: Get configuration
CS --> EP3: Configuration response

EP3 --> AG: Configuration response
AG -> AG: Apply configuration

AG -> EP4: Call Middleware Service
note right: API Gateway to Middleware

EP4 -> EP4: Apply sidecar policies
EP4 -> EP4: Check mTLS
EP4 -> EP4: Apply timeout

EP4 -> MS: Forward to Middleware Service
MS -> MS: Process business logic

MS -> EP5: Call Database
note right: Middleware to Database

EP5 -> EP5: Apply sidecar policies
EP5 -> EP5: Check mTLS
EP5 -> EP5: Apply connection pooling

EP5 -> DB: Database query
DB --> EP5: Database response

EP5 --> MS: Database response
MS --> EP4: Business logic response

EP4 --> AG: Middleware response
AG --> EP1: API Gateway response

EP1 --> IG: Envoy response
IG --> LB: Istio Gateway response
LB --> C: Final response

== mTLS Communication ==

note over EP1, EP5
All service-to-service communication
is secured with mTLS certificates
managed by Istio
end note

EP1 -> EP2: mTLS connection
EP2 -> EP3: mTLS connection
EP3 -> EP4: mTLS connection
EP4 -> EP5: mTLS connection

== Traffic Management ==

note over IG, EP5
Istio provides advanced traffic management:
- Load balancing
- Circuit breaking
- Retry logic
- Timeout management
- Fault injection
end note

IG -> IG: Apply load balancing
EP1 -> EP1: Apply circuit breaker
EP2 -> EP2: Apply retry logic
EP3 -> EP3: Apply timeout
EP4 -> EP4: Apply fault injection

== Security Policies ==

note over IG, EP5
Security policies applied at each layer:
- Network policies
- Authorization policies
- mTLS enforcement
- Rate limiting
- IP allowlisting
end note

IG -> IG: Apply network policies
EP1 -> EP1: Apply authorization policies
EP2 -> EP2: Enforce mTLS
EP3 -> EP3: Apply rate limiting
EP4 -> EP4: Apply IP allowlisting

== Observability ==

note over IG, EP5
Istio provides comprehensive observability:
- Distributed tracing
- Metrics collection
- Log aggregation
- Service topology
- Performance monitoring
end note

IG -> IG: Collect gateway metrics
EP1 -> EP1: Collect sidecar metrics
EP2 -> EP2: Collect sidecar metrics
EP3 -> EP3: Collect sidecar metrics
EP4 -> EP4: Collect sidecar metrics

== Service Discovery ==

note over IG, EP5
Istio provides service discovery:
- Automatic service registration
- Health checking
- Load balancing
- Service mesh topology
end note

IG -> IG: Discover services
EP1 -> EP1: Register with service mesh
EP2 -> EP2: Register with service mesh
EP3 -> EP3: Register with service mesh
EP4 -> EP4: Register with service mesh

== Error Handling ==

alt Service unavailable
    EP1 -> EP1: Circuit breaker open
    EP1 --> IG: Service unavailable
    IG --> LB: 503 Service Unavailable
    LB --> C: Service temporarily unavailable
else Network timeout
    EP2 -> EP2: Timeout after 30s
    EP2 --> EP1: Request timeout
    EP1 --> IG: Request timeout
    IG --> LB: 504 Gateway Timeout
    LB --> C: Request timeout
else mTLS failure
    EP3 -> EP3: mTLS handshake failed
    EP3 --> EP2: mTLS error
    EP2 --> EP1: Security error
    EP1 --> IG: Security error
    IG --> LB: 403 Forbidden
    LB --> C: Security error
end

== Performance Optimization ==

note over IG, EP5
Performance optimizations:
- Connection pooling
- Request batching
- Caching
- Compression
- Load balancing
end note

EP1 -> EP1: Pool connections
EP2 -> EP2: Batch requests
EP3 -> EP3: Cache responses
EP4 -> EP4: Compress data
EP5 -> EP5: Balance load

@enduml