@startuml COMPREHENSIVE_ISO20022_FLOW
!theme plain
title Comprehensive ISO 20022 Message Flow with All Message Types

actor Client as C
participant "API Gateway" as AG
participant "Payment Processing Service" as MS
participant "Core Banking" as CB
participant "Clearing System" as CS
participant "Kafka" as K
participant "Redis Cache" as RC
participant "Audit Service" as AS
participant "Webhook Service" as WS

== Message Flow: PACS.028 Status Request ==

C -> AG: POST /api/v1/iso20022/comprehensive/pacs028
note right: JWT Token: Bearer <token>\nScope: iso20022:status

AG -> AG: Validate JWT Token & Rate Limits
AG -> MS: Forward PACS.028 Request

MS -> AS: Log Authentication Event
MS -> RC: Get Tenant & Clearing System Config
MS -> MS: Validate PACS.028 Message
MS -> MS: Extract Status Request Details

MS -> CS: POST PACS.028 to Clearing System
note right: Endpoint: /sync/pacs028\nMessage: Status Request\nTimeout: 30s

CS -> CS: Process Status Request
CS -> CS: Query Payment Status
CS --> MS: Return PACS.002 Status Response
note right: Status: ACCP/RJCT\nOriginal Transaction ID\nStatus Details

MS -> AS: Log Clearing System Event
MS -> MS: Transform Response
MS --> AG: Return PACS.002 Status
AG --> C: Return Status Response

== Message Flow: PACS.004 Payment Return ==

CS -> MS: POST Webhook PACS.004
note right: Webhook: /webhook/pacs004\nMessage: Payment Return\nReason: Return Request

MS -> AS: Log Webhook Delivery Event
MS -> MS: Validate PACS.004 Message
MS -> MS: Extract Return Details

MS -> RC: Get Original Transaction Details
RC --> MS: Return Transaction Info

MS -> MS: Transform PACS.004 to Client Format
MS -> AS: Log Message Processing Event

alt Client Response Mode: WEBHOOK
    MS -> WS: Deliver Return Notification
    WS -> C: POST Webhook with PACS.004
    note right: Client Webhook URL\nRetry: 3 attempts\nTimeout: 10s
    
else Client Response Mode: KAFKA
    MS -> K: Send PACS.004 to Kafka Topic
    note right: Topic: tenant-<tenant-id>-returns\nKey: <original-txn-id>\nMessage: PACS.004
end

== Message Flow: PACS.007 Payment Cancellation ==

C -> AG: POST /api/v1/iso20022/comprehensive/pacs007
note right: JWT Token: Bearer <token>\nScope: iso20022:cancel

AG -> AG: Validate JWT Token & Rate Limits
AG -> MS: Forward PACS.007 Request

MS -> AS: Log Authentication Event
MS -> RC: Get Transaction & Clearing System Config
MS -> MS: Validate PACS.007 Message
MS -> MS: Extract Cancellation Details

MS -> CS: POST PACS.007 to Clearing System
note right: Endpoint: /sync/pacs007\nMessage: Cancellation Request\nTimeout: 30s

CS -> CS: Process Cancellation Request
CS -> CS: Check Cancellation Eligibility
CS -> CS: Cancel Payment

alt Cancellation Successful
    CS --> MS: Return PACS.002 Cancellation Response
    note right: Status: ACCP\nCancellation Confirmed\nCancellation Time
    
    MS -> AS: Log Clearing System Event
    MS -> MS: Transform Response
    MS --> AG: Return PACS.002 Cancellation
    AG --> C: Return Cancellation Confirmation
    
else Cancellation Failed
    CS --> MS: Return PACS.002 Rejection
    note right: Status: RJCT\nReason: "Payment already processed"\nError Code: DUPL
    
    MS -> AS: Log Clearing System Event
    MS -> MS: Transform Response
    MS --> AG: Return PACS.002 Rejection
    AG --> C: Return Cancellation Rejection
end

== Message Flow: CAMT.054 Notification ==

CS -> MS: POST Webhook CAMT.054
note right: Webhook: /webhook/camt054\nMessage: Debit/Credit Notification\nAccount: <account-id>

MS -> AS: Log Webhook Delivery Event
MS -> MS: Validate CAMT.054 Message
MS -> MS: Extract Notification Details

MS -> RC: Get Account & Tenant Config
RC --> MS: Return Account Information

MS -> MS: Transform CAMT.054 to Client Format
MS -> AS: Log Message Processing Event

alt Client Response Mode: WEBHOOK
    MS -> WS: Deliver Account Notification
    WS -> C: POST Webhook with CAMT.054
    note right: Client Webhook URL\nAccount Notification\nRetry: 3 attempts
    
else Client Response Mode: KAFKA
    MS -> K: Send CAMT.054 to Kafka Topic
    note right: Topic: tenant-<tenant-id>-notifications\nKey: <account-id>\nMessage: CAMT.054
end

== Message Flow: CAMT.055 Cancellation Request ==

C -> AG: POST /api/v1/iso20022/comprehensive/camt055
note right: JWT Token: Bearer <token>\nScope: iso20022:cancel

AG -> AG: Validate JWT Token & Rate Limits
AG -> MS: Forward CAMT.055 Request

MS -> AS: Log Authentication Event
MS -> RC: Get Transaction & Clearing System Config
MS -> MS: Validate CAMT.055 Message
MS -> MS: Extract Cancellation Request Details

MS -> CS: POST CAMT.055 to Clearing System
note right: Endpoint: /sync/camt055\nMessage: Cancellation Request\nTimeout: 30s

CS -> CS: Process Cancellation Request
CS -> CS: Validate Cancellation Rights
CS -> CS: Process Cancellation

CS --> MS: Return CAMT.029 Resolution Response
note right: Status: ACCP/RJCT\nResolution Details\nCancellation Confirmation

MS -> AS: Log Clearing System Event
MS -> MS: Transform Response
MS --> AG: Return CAMT.029 Resolution
AG --> C: Return Resolution Response

== Error Scenarios ==

== Scenario: Clearing System Timeout ==

C -> AG: POST /api/v1/iso20022/comprehensive/pain001
AG -> MS: Forward Request
MS -> CS: POST PACS.008 to Clearing System

note over CS: Timeout after 30 seconds

CS --> MS: Timeout Exception
MS -> AS: Log Clearing System Event
note right: Event: CLEARING_SYSTEM\nAction: PAYMENT_PROCESSING\nSuccess: false\nError: "Timeout"

MS -> MS: Apply Retry Logic
note right: Retry: 3 attempts\nBackoff: Exponential\nMax Wait: 5s

MS -> CS: Retry PACS.008 Request

alt Retry Successful
    CS --> MS: Return PACS.002 Response
    MS -> AS: Log Clearing System Event
    note right: Event: CLEARING_SYSTEM\nAction: PAYMENT_PROCESSING\nSuccess: true\nRetry: true
    
    MS --> AG: Return Success Response
    AG --> C: Return PAIN.002 Response
    
else All Retries Failed
    MS -> AS: Log Clearing System Event
    note right: Event: CLEARING_SYSTEM\nAction: PAYMENT_PROCESSING\nSuccess: false\nError: "All retries failed"
    
    MS -> K: Send to Dead Letter Queue
    note right: Topic: failed-payments.dlq\nKey: <correlation-id>\nMessage: Original PACS.008
    
    MS --> AG: Return Error Response
    AG --> C: Return 500 Internal Server Error
    note right: Status: 500\nError: "Payment processing failed"\nCorrelation ID: <id>
end

== Scenario: Circuit Breaker Activation ==

C -> AG: POST /api/v1/iso20022/comprehensive/pain001
AG -> AG: Check Circuit Breaker State

alt Circuit Breaker OPEN
    AG -> AS: Log Circuit Breaker Event
    note right: Event: CIRCUIT_BREAKER\nAction: REQUEST_BLOCKED\nState: OPEN\nService: clearing-system
    
    AG --> C: Return 503 Service Unavailable
    note right: Status: 503\nMessage: "Service temporarily unavailable"\nRetry After: 30s\nFallback: true
    
else Circuit Breaker CLOSED
    AG -> MS: Forward Request
    MS -> CS: POST PACS.008 to Clearing System
    
    CS --> MS: Return Error Response
    note right: Status: 500\nError: "Internal server error"
    
    MS -> AS: Log Clearing System Event
    note right: Event: CLEARING_SYSTEM\nAction: PAYMENT_PROCESSING\nSuccess: false\nError: "Internal server error"
    
    MS --> AG: Return Error Response
    AG -> AG: Update Circuit Breaker Metrics
    note right: Failure Rate: 60%\nThreshold: 50%\nState: OPEN
    
    AG --> C: Return 500 Internal Server Error
end

== Security & Monitoring Features ==

note over C,AS
Security Mechanisms:
- JWT Token Authentication with Scopes
- Rate Limiting (100 req/sec per user)
- Circuit Breaker Protection
- Message Encryption (AES-GCM)
- Digital Signatures (RSA)
- Input Validation & Sanitization
- CORS Protection
- Request/Response Headers
- Correlation ID Tracking
- Comprehensive Audit Logging
- Webhook Signature Verification
- Timeout Management
- Retry Logic with Exponential Backoff
- Dead Letter Queue for Failed Messages
- Health Checks & Monitoring
- Metrics Collection (Prometheus)
- Distributed Tracing (Jaeger)
end note

@enduml