version: '3.8'

# Development-optimized Docker Compose configuration
# Includes: hot-reload support, debugging ports, dev tools, and lighter resources

services:
  # PostgreSQL Database - Development Configuration
  postgres:
    image: postgres:15-alpine
    container_name: payment-engine-postgres-dev
    environment:
      POSTGRES_DB: payment_engine_dev
      POSTGRES_USER: dev_user
      POSTGRES_PASSWORD: dev_pass
      PGDATA: /var/lib/postgresql/data/pgdata
      # Development-friendly settings
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/migrations:/docker-entrypoint-initdb.d/migrations
    networks:
      - payment-network-dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev_user -d payment_engine_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    # Dev-friendly resource limits
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  # PgAdmin for PostgreSQL Management (Dev only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: payment-engine-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@paymentengine.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_dev_data:/var/lib/pgadmin
    networks:
      - payment-network-dev
    depends_on:
      - postgres

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: payment-engine-zookeeper-dev
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: WARN
    ports:
      - "2181:2181"
    networks:
      - payment-network-dev
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Kafka - Development Configuration
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: payment-engine-kafka-dev
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9094:9094"
      - "9101:9101"  # JMX port for monitoring
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      # Development-friendly logging
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
      KAFKA_LOG4J_LOGGERS: "kafka.controller=WARN,kafka.producer.async.DefaultEventHandler=WARN,state.change.logger=WARN"
      # JMX monitoring
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    networks:
      - payment-network-dev
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Kafka UI for Management - Enhanced for Dev
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: payment-engine-kafka-ui-dev
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: payment-engine-dev
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_METRICS_PORT: 9101
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - payment-network-dev

  # Redis - Development Configuration
  redis:
    image: redis:7-alpine
    container_name: payment-engine-redis-dev
    ports:
      - "6379:6379"
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --save 60 1
      --loglevel warning
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_dev_data:/data
    networks:
      - payment-network-dev
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Redis Commander for Redis Management (Dev only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: payment-engine-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - payment-network-dev
    depends_on:
      - redis

  # Prometheus - Lighter config for dev
  prometheus:
    image: prom/prometheus:latest
    container_name: payment-engine-prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_dev_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=24h'  # Shorter retention for dev
      - '--web.enable-lifecycle'
      - '--log.level=warn'  # Less verbose in dev
    networks:
      - payment-network-dev
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: payment-engine-grafana-dev
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_SECURITY_ADMIN_USER: admin
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-clock-panel
      GF_LOG_LEVEL: warn
    volumes:
      - grafana_dev_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - payment-network-dev
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Elasticsearch - Single node for dev
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: payment-engine-elasticsearch-dev
    environment:
      - node.name=es-dev-node
      - cluster.name=payment-engine-dev-cluster
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - xpack.monitoring.collection.enabled=true
      - logger.level=WARN
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_dev_data:/usr/share/elasticsearch/data
    networks:
      - payment-network-dev
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: payment-engine-kibana-dev
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - LOGGING_ROOT_LEVEL=warn
    ports:
      - "5601:5601"
    networks:
      - payment-network-dev
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Logstash - Lighter config for dev
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: payment-engine-logstash-dev
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - LS_JAVA_OPTS=-Xms256m -Xmx256m
      - LOG_LEVEL=warn
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    volumes:
      - ./monitoring/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
    networks:
      - payment-network-dev
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Jaeger for Distributed Tracing (Dev Tool)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: payment-engine-jaeger-dev
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "5775:5775/udp"  # accept zipkin.thrift over compact thrift protocol
      - "6831:6831/udp"  # accept jaeger.thrift over compact thrift protocol
      - "6832:6832/udp"  # accept jaeger.thrift over binary thrift protocol
      - "5778:5778"      # serve configs
      - "16686:16686"    # serve frontend
      - "14268:14268"    # accept jaeger.thrift directly from clients
      - "14250:14250"    # accept model.proto
      - "9411:9411"      # Zipkin compatible endpoint
      - "4317:4317"      # OTLP gRPC receiver
      - "4318:4318"      # OTLP HTTP receiver
    networks:
      - payment-network-dev
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Mailhog for Email Testing (Dev Tool)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: payment-engine-mailhog
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - payment-network-dev
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

volumes:
  postgres_dev_data:
    driver: local
  pgadmin_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  prometheus_dev_data:
    driver: local
  grafana_dev_data:
    driver: local
  elasticsearch_dev_data:
    driver: local

networks:
  payment-network-dev:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
version: "3.9"
services:
  postgres:
    image: postgres:15.5
    environment:
      POSTGRES_USER: pe
      POSTGRES_PASSWORD: pe
      POSTGRES_DB: payment_engine
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
      - "29092:29092"
  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    ports:
      - "8081:8081"

volumes:
  postgres-data:
