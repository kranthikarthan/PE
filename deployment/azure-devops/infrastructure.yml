# Azure Resource Manager (ARM) Template Pipeline
# Creates Azure infrastructure for Payment Engine

trigger: none

pr: none

variables:
  azureSubscription: 'PaymentEngineSubscription'
  resourceGroupName: 'payment-engine-rg'
  location: 'East US'
  aksClusterName: 'payment-engine-aks'
  acrName: 'paymentengineacr'
  keyVaultName: 'payment-engine-kv'
  
stages:
  - stage: ValidateInfrastructure
    displayName: 'Validate Infrastructure Templates'
    jobs:
      - job: ValidateARM
        displayName: 'Validate ARM Templates'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            displayName: 'Checkout source code'
            
          - task: AzureResourceManagerTemplateDeployment@3
            displayName: 'Validate Resource Group Template'
            inputs:
              deploymentScope: 'Subscription'
              azureResourceManagerConnection: $(azureSubscription)
              subscriptionId: $(subscriptionId)
              location: $(location)
              templateLocation: 'Linked artifact'
              csmFile: 'deployment/azure-arm/resource-group.json'
              csmParametersFile: 'deployment/azure-arm/resource-group.parameters.json'
              deploymentMode: 'Validation'
              
          - task: AzureResourceManagerTemplateDeployment@3
            displayName: 'Validate AKS Template'
            inputs:
              deploymentScope: 'Resource Group'
              azureResourceManagerConnection: $(azureSubscription)
              subscriptionId: $(subscriptionId)
              resourceGroupName: $(resourceGroupName)
              location: $(location)
              templateLocation: 'Linked artifact'
              csmFile: 'deployment/azure-arm/aks-cluster.json'
              csmParametersFile: 'deployment/azure-arm/aks-cluster.parameters.json'
              deploymentMode: 'Validation'

  - stage: DeployInfrastructure
    displayName: 'Deploy Azure Infrastructure'
    dependsOn: ValidateInfrastructure
    condition: succeeded()
    jobs:
      - deployment: DeployAzureResources
        displayName: 'Deploy Azure Resources'
        pool:
          vmImage: 'ubuntu-latest'
        environment: 'azure-infrastructure'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: 'Checkout source code'
                  
                - task: AzureResourceManagerTemplateDeployment@3
                  displayName: 'Deploy Resource Group'
                  inputs:
                    deploymentScope: 'Subscription'
                    azureResourceManagerConnection: $(azureSubscription)
                    subscriptionId: $(subscriptionId)
                    location: $(location)
                    templateLocation: 'Linked artifact'
                    csmFile: 'deployment/azure-arm/resource-group.json'
                    csmParametersFile: 'deployment/azure-arm/resource-group.parameters.json'
                    deploymentMode: 'Incremental'
                    deploymentName: 'payment-engine-rg-deployment'
                    
                - task: AzureResourceManagerTemplateDeployment@3
                  displayName: 'Deploy Container Registry'
                  inputs:
                    deploymentScope: 'Resource Group'
                    azureResourceManagerConnection: $(azureSubscription)
                    subscriptionId: $(subscriptionId)
                    resourceGroupName: $(resourceGroupName)
                    location: $(location)
                    templateLocation: 'Linked artifact'
                    csmFile: 'deployment/azure-arm/container-registry.json'
                    csmParametersFile: 'deployment/azure-arm/container-registry.parameters.json'
                    deploymentMode: 'Incremental'
                    deploymentName: 'payment-engine-acr-deployment'
                    
                - task: AzureResourceManagerTemplateDeployment@3
                  displayName: 'Deploy Key Vault'
                  inputs:
                    deploymentScope: 'Resource Group'
                    azureResourceManagerConnection: $(azureSubscription)
                    subscriptionId: $(subscriptionId)
                    resourceGroupName: $(resourceGroupName)
                    location: $(location)
                    templateLocation: 'Linked artifact'
                    csmFile: 'deployment/azure-arm/key-vault.json'
                    csmParametersFile: 'deployment/azure-arm/key-vault.parameters.json'
                    deploymentMode: 'Incremental'
                    deploymentName: 'payment-engine-kv-deployment'
                    
                - task: AzureResourceManagerTemplateDeployment@3
                  displayName: 'Deploy AKS Cluster'
                  inputs:
                    deploymentScope: 'Resource Group'
                    azureResourceManagerConnection: $(azureSubscription)
                    subscriptionId: $(subscriptionId)
                    resourceGroupName: $(resourceGroupName)
                    location: $(location)
                    templateLocation: 'Linked artifact'
                    csmFile: 'deployment/azure-arm/aks-cluster.json'
                    csmParametersFile: 'deployment/azure-arm/aks-cluster.parameters.json'
                    deploymentMode: 'Incremental'
                    deploymentName: 'payment-engine-aks-deployment'
                    deploymentOutputs: 'aksOutputs'
                    
                - task: AzureResourceManagerTemplateDeployment@3
                  displayName: 'Deploy PostgreSQL Database'
                  inputs:
                    deploymentScope: 'Resource Group'
                    azureResourceManagerConnection: $(azureSubscription)
                    subscriptionId: $(subscriptionId)
                    resourceGroupName: $(resourceGroupName)
                    location: $(location)
                    templateLocation: 'Linked artifact'
                    csmFile: 'deployment/azure-arm/postgresql.json'
                    csmParametersFile: 'deployment/azure-arm/postgresql.parameters.json'
                    deploymentMode: 'Incremental'
                    deploymentName: 'payment-engine-postgres-deployment'
                    
                - task: AzureResourceManagerTemplateDeployment@3
                  displayName: 'Deploy Monitoring Resources'
                  inputs:
                    deploymentScope: 'Resource Group'
                    azureResourceManagerConnection: $(azureSubscription)
                    subscriptionId: $(subscriptionId)
                    resourceGroupName: $(resourceGroupName)
                    location: $(location)
                    templateLocation: 'Linked artifact'
                    csmFile: 'deployment/azure-arm/monitoring.json'
                    csmParametersFile: 'deployment/azure-arm/monitoring.parameters.json'
                    deploymentMode: 'Incremental'
                    deploymentName: 'payment-engine-monitoring-deployment'
                    
                - task: AzureCLI@2
                  displayName: 'Configure AKS Cluster'
                  inputs:
                    azureSubscription: $(azureSubscription)
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      # Get AKS credentials
                      az aks get-credentials --resource-group $(resourceGroupName) --name $(aksClusterName) --overwrite-existing
                      
                      # Install kubectl
                      curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                      chmod +x kubectl
                      sudo mv kubectl /usr/local/bin/
                      
                      # Verify cluster connection
                      kubectl cluster-info
                      kubectl get nodes
                      
                      # Create cluster role binding for Azure DevOps
                      kubectl create clusterrolebinding azure-devops-admin --clusterrole=cluster-admin --user=azure-devops@company.com || true
                      
                - task: AzureCLI@2
                  displayName: 'Setup Container Registry Integration'
                  inputs:
                    azureSubscription: $(azureSubscription)
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      # Attach ACR to AKS
                      az aks update --resource-group $(resourceGroupName) --name $(aksClusterName) --attach-acr $(acrName)
                      
                      # Enable admin user for ACR
                      az acr update --name $(acrName) --admin-enabled true
                      
                      # Get ACR credentials
                      ACR_USERNAME=$(az acr credential show --name $(acrName) --query "username" --output tsv)
                      ACR_PASSWORD=$(az acr credential show --name $(acrName) --query "passwords[0].value" --output tsv)
                      
                      echo "ACR Username: $ACR_USERNAME"
                      echo "##vso[task.setvariable variable=acrUsername;isOutput=true]$ACR_USERNAME"
                      echo "##vso[task.setvariable variable=acrPassword;isSecret=true;isOutput=true]$ACR_PASSWORD"
                      
                - task: AzureCLI@2
                  displayName: 'Configure Key Vault Secrets'
                  inputs:
                    azureSubscription: $(azureSubscription)
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      # Set Key Vault secrets
                      az keyvault secret set --vault-name $(keyVaultName) --name "DatabasePassword" --value "$(databasePassword)"
                      az keyvault secret set --vault-name $(keyVaultName) --name "JWTSecret" --value "$(jwtSecret)"
                      az keyvault secret set --vault-name $(keyVaultName) --name "EncryptionKey" --value "$(encryptionKey)"
                      
                      # Grant AKS access to Key Vault
                      AKS_IDENTITY=$(az aks show --resource-group $(resourceGroupName) --name $(aksClusterName) --query "identity.principalId" --output tsv)
                      az keyvault set-policy --name $(keyVaultName) --object-id $AKS_IDENTITY --secret-permissions get list
                      
                - script: |
                    echo "Infrastructure deployment completed successfully!"
                    echo "Resource Group: $(resourceGroupName)"
                    echo "AKS Cluster: $(aksClusterName)"
                    echo "Container Registry: $(acrName)"
                    echo "Key Vault: $(keyVaultName)"
                    echo "Location: $(location)"
                  displayName: 'Deployment Summary'

  - stage: ConfigureMonitoring
    displayName: 'Configure Monitoring and Alerting'
    dependsOn: DeployInfrastructure
    condition: succeeded()
    jobs:
      - job: SetupMonitoring
        displayName: 'Setup Azure Monitor and Alerts'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            displayName: 'Checkout source code'
            
          - task: AzureCLI@2
            displayName: 'Configure Log Analytics Workspace'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Enable Container Insights for AKS
                az aks enable-addons --resource-group $(resourceGroupName) --name $(aksClusterName) --addons monitoring
                
                # Get Log Analytics Workspace ID
                WORKSPACE_ID=$(az monitor log-analytics workspace show --resource-group $(resourceGroupName) --workspace-name payment-engine-logs --query "customerId" --output tsv)
                echo "Log Analytics Workspace ID: $WORKSPACE_ID"
                
          - task: AzureCLI@2
            displayName: 'Create Alert Rules'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Create action group for notifications
                az monitor action-group create \
                  --resource-group $(resourceGroupName) \
                  --name payment-engine-alerts \
                  --short-name pe-alerts \
                  --email-receiver name="DevOps Team" email="devops@company.com"
                
                # Create metric alerts for AKS cluster
                az monitor metrics alert create \
                  --name "AKS High CPU Usage" \
                  --resource-group $(resourceGroupName) \
                  --scopes "/subscriptions/$(subscriptionId)/resourceGroups/$(resourceGroupName)/providers/Microsoft.ContainerService/managedClusters/$(aksClusterName)" \
                  --condition "avg Percentage CPU > 80" \
                  --description "Alert when AKS cluster CPU usage exceeds 80%" \
                  --evaluation-frequency 5m \
                  --window-size 15m \
                  --severity 2 \
                  --action payment-engine-alerts
                  
                az monitor metrics alert create \
                  --name "AKS High Memory Usage" \
                  --resource-group $(resourceGroupName) \
                  --scopes "/subscriptions/$(subscriptionId)/resourceGroups/$(resourceGroupName)/providers/Microsoft.ContainerService/managedClusters/$(aksClusterName)" \
                  --condition "avg Memory RSS Percentage > 85" \
                  --description "Alert when AKS cluster memory usage exceeds 85%" \
                  --evaluation-frequency 5m \
                  --window-size 15m \
                  --severity 2 \
                  --action payment-engine-alerts