# Azure DevOps CI/CD Pipeline for Payment Engine
# Supports multi-stage deployment with automated testing and security scanning

trigger:
  branches:
    include:
      - main
      - develop
      - release/*
  paths:
    exclude:
      - docs/*
      - README.md
      - .gitignore

pr:
  branches:
    include:
      - main
      - develop
  paths:
    exclude:
      - docs/*
      - README.md

variables:
  # Container Registry
  containerRegistry: 'paymentengine.azurecr.io'
  containerRegistryConnection: 'PaymentEngineACR'
  
  # Kubernetes
  kubernetesConnection: 'PaymentEngineAKS'
  kubernetesNamespace: 'payment-engine'
  
  # Application
  appName: 'payment-engine'
  buildConfiguration: 'Release'
  
  # Versioning
  majorVersion: 1
  minorVersion: 0
  patchVersion: $[counter(variables['Build.SourceBranchName'], 0)]
  buildVersion: '$(majorVersion).$(minorVersion).$(patchVersion)'
  
  # Security
  trivyVersion: '0.45.0'
  sonarQubeConnection: 'SonarQube'

stages:
  # ============================================================================
  # BUILD STAGE
  # ============================================================================
  - stage: Build
    displayName: 'Build and Test'
    jobs:
      - job: BuildBackend
        displayName: 'Build Backend Services'
        pool:
          vmImage: 'ubuntu-latest'
        variables:
          MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
          MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
        steps:
          - checkout: self
            displayName: 'Checkout source code'
            
          - task: Cache@2
            displayName: 'Cache Maven dependencies'
            inputs:
              key: 'maven | "$(Agent.OS)" | services/**/pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)
              
          - task: JavaToolInstaller@0
            displayName: 'Install Java 17'
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
              
          - task: Maven@3
            displayName: 'Build Shared Components'
            inputs:
              mavenPomFile: 'services/shared/pom.xml'
              goals: 'clean compile install'
              options: '-DskipTests=true'
              javaHomeOption: 'JDKVersion'
              
          - task: Maven@3
            displayName: 'Build Core Banking Service'
            inputs:
              mavenPomFile: 'services/core-banking/pom.xml'
              goals: 'clean compile package'
              options: '-DskipTests=false'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              codeCoverageToolOption: 'JaCoCo'
              javaHomeOption: 'JDKVersion'

          - task: Maven@3
            displayName: 'Build API Gateway Service'
            inputs:
              mavenPomFile: 'services/api-gateway/pom.xml'
              goals: 'clean compile package'
              options: '-DskipTests=false'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              codeCoverageToolOption: 'JaCoCo'
              javaHomeOption: 'JDKVersion'

          - task: Maven@3
            displayName: 'Build Payment Processing Service'
            inputs:
              mavenPomFile: 'services/payment-processing/pom.xml'
              goals: 'clean compile package'
              options: '-DskipTests=false'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              codeCoverageToolOption: 'JaCoCo'
              javaHomeOption: 'JDKVersion'

          - task: Maven@3
            displayName: 'Build Auth Service'
            inputs:
              mavenPomFile: 'services/auth-service/pom.xml'
              goals: 'clean compile package'
              options: '-DskipTests=false'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              codeCoverageToolOption: 'JaCoCo'
              javaHomeOption: 'JDKVersion'
              
          - task: SonarQubePrepare@4
            displayName: 'Prepare SonarQube Analysis'
            inputs:
              SonarQube: $(sonarQubeConnection)
              scannerMode: 'Other'
              extraProperties: |
                sonar.projectKey=payment-engine-backend
                sonar.projectName=Payment Engine Backend
                sonar.projectVersion=$(buildVersion)
                sonar.sources=services/*/src/main/java
                sonar.tests=services/*/src/test/java
                sonar.java.binaries=services/*/target/classes
                sonar.coverage.jacoco.xmlReportPaths=services/*/target/site/jacoco/jacoco.xml
                
          - task: Maven@3
            displayName: 'Run SonarQube Analysis'
            inputs:
              mavenPomFile: 'services/core-banking/pom.xml'
              goals: 'sonar:sonar'
              javaHomeOption: 'JDKVersion'
              
          - task: SonarQubePublish@4
            displayName: 'Publish SonarQube Results'
            inputs:
              pollingTimeoutSec: '300'
              
          - task: Docker@2
            displayName: 'Build Core Banking Docker Image'
            inputs:
              containerRegistry: $(containerRegistryConnection)
              repository: 'core-banking'
              command: 'build'
              Dockerfile: 'services/core-banking/Dockerfile'
              buildContext: 'services'
              tags: |
                $(buildVersion)
                
          - task: Docker@2
            displayName: 'Push Core Banking Docker Image'
            inputs:
              containerRegistry: $(containerRegistryConnection)
              repository: 'core-banking'
              command: 'push'
              tags: |
                $(buildVersion)

          - script: |
              CORE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $(containerRegistry)/core-banking:$(buildVersion))
              CORE_DIGEST=${CORE_DIGEST##*@}
              echo "##vso[task.setvariable variable=coreBankingDigest;isOutput=true]$CORE_DIGEST"
            displayName: 'Capture Core Banking image digest'
            name: setCoreBankingDigest

          - task: Docker@2
            displayName: 'Build API Gateway Docker Image'
            inputs:
              containerRegistry: $(containerRegistryConnection)
              repository: 'api-gateway'
              command: 'build'
              Dockerfile: 'services/api-gateway/Dockerfile'
              buildContext: 'services'
              tags: |
                $(buildVersion)

          - task: Docker@2
            displayName: 'Push API Gateway Docker Image'
            inputs:
              containerRegistry: $(containerRegistryConnection)
              repository: 'api-gateway'
              command: 'push'
              tags: |
                $(buildVersion)

          - script: |
              API_GATEWAY_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $(containerRegistry)/api-gateway:$(buildVersion))
              API_GATEWAY_DIGEST=${API_GATEWAY_DIGEST##*@}
              echo "##vso[task.setvariable variable=apiGatewayDigest;isOutput=true]$API_GATEWAY_DIGEST"
            displayName: 'Capture API Gateway image digest'
            name: setApiGatewayDigest

          - task: Docker@2
            displayName: 'Build Payment Processing Docker Image'
            inputs:
              containerRegistry: $(containerRegistryConnection)
              repository: 'payment-processing'
              command: 'build'
              Dockerfile: 'services/payment-processing/Dockerfile'
              buildContext: 'services'
              tags: |
                $(buildVersion)

          - task: Docker@2
            displayName: 'Push Payment Processing Docker Image'
            inputs:
              containerRegistry: $(containerRegistryConnection)
              repository: 'payment-processing'
              command: 'push'
              tags: |
                $(buildVersion)

          - script: |
              PAYMENT_PROCESSING_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $(containerRegistry)/payment-processing:$(buildVersion))
              PAYMENT_PROCESSING_DIGEST=${PAYMENT_PROCESSING_DIGEST##*@}
              echo "##vso[task.setvariable variable=paymentProcessingDigest;isOutput=true]$PAYMENT_PROCESSING_DIGEST"
            displayName: 'Capture Payment Processing image digest'
            name: setPaymentProcessingDigest

          - task: Docker@2
            displayName: 'Build Auth Service Docker Image'
            inputs:
              containerRegistry: $(containerRegistryConnection)
              repository: 'auth-service'
              command: 'build'
              Dockerfile: 'services/auth-service/Dockerfile'
              buildContext: 'services'
              tags: |
                $(buildVersion)

          - task: Docker@2
            displayName: 'Push Auth Service Docker Image'
            inputs:
              containerRegistry: $(containerRegistryConnection)
              repository: 'auth-service'
              command: 'push'
              tags: |
                $(buildVersion)

          - script: |
              AUTH_SERVICE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $(containerRegistry)/auth-service:$(buildVersion))
              AUTH_SERVICE_DIGEST=${AUTH_SERVICE_DIGEST##*@}
              echo "##vso[task.setvariable variable=authServiceDigest;isOutput=true]$AUTH_SERVICE_DIGEST"
            displayName: 'Capture Auth Service image digest'
            name: setAuthServiceDigest
                
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish Code Coverage'
            inputs:
              codeCoverageTool: 'JaCoCo'
              summaryFileLocation: '**/target/site/jacoco/jacoco.xml'
              reportDirectory: '**/target/site/jacoco'

      - job: BuildFrontend
        displayName: 'Build Frontend Application'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            displayName: 'Checkout source code'
            
          - task: NodeTool@0
            displayName: 'Install Node.js 18'
            inputs:
              versionSpec: '18.x'
              
          - task: Cache@2
            displayName: 'Cache npm dependencies'
            inputs:
              key: 'npm | "$(Agent.OS)" | frontend/package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: ~/.npm
              
          - script: |
              cd frontend
              npm ci
            displayName: 'Install dependencies'
            
          - script: |
              cd frontend
              npm run lint
            displayName: 'Run ESLint'
            
          - script: |
              cd frontend
              npm run type-check
            displayName: 'TypeScript type checking'
            
          - script: |
              cd frontend
              npm test -- --coverage --watchAll=false
            displayName: 'Run tests with coverage'
            
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'frontend/junit.xml'
              
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish Code Coverage'
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: 'frontend/coverage/cobertura-coverage.xml'
              reportDirectory: 'frontend/coverage/lcov-report'
              
          - script: |
              cd frontend
              npm run build
            displayName: 'Build React application'
            env:
              REACT_APP_VERSION: $(buildVersion)
              
          - task: Docker@2
            displayName: 'Build Frontend Docker Image'
            inputs:
              containerRegistry: $(containerRegistryConnection)
              repository: 'frontend'
              command: 'build'
              Dockerfile: 'frontend/Dockerfile'
              buildContext: 'frontend'
              tags: |
                $(buildVersion)
                
          - task: Docker@2
            displayName: 'Push Frontend Docker Image'
            inputs:
              containerRegistry: $(containerRegistryConnection)
              repository: 'frontend'
              command: 'push'
              tags: |
                $(buildVersion)

  # ============================================================================
  # SECURITY SCANNING STAGE
  # ============================================================================
  - stage: SecurityScan
    displayName: 'Security Scanning'
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: ContainerScan
        displayName: 'Container Security Scan'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: Docker@2
            displayName: 'Pull Core Banking Image'
            inputs:
              containerRegistry: $(containerRegistryConnection)
              command: 'pull'
              arguments: '$(containerRegistry)/core-banking:$(buildVersion)'

          - task: Docker@2
            displayName: 'Pull API Gateway Image'
            inputs:
              containerRegistry: $(containerRegistryConnection)
              command: 'pull'
              arguments: '$(containerRegistry)/api-gateway:$(buildVersion)'

          - task: Docker@2
            displayName: 'Pull Payment Processing Image'
            inputs:
              containerRegistry: $(containerRegistryConnection)
              command: 'pull'
              arguments: '$(containerRegistry)/payment-processing:$(buildVersion)'

          - task: Docker@2
            displayName: 'Pull Auth Service Image'
            inputs:
              containerRegistry: $(containerRegistryConnection)
              command: 'pull'
              arguments: '$(containerRegistry)/auth-service:$(buildVersion)'
              
          - script: |
              wget https://github.com/aquasecurity/trivy/releases/download/v$(trivyVersion)/trivy_$(trivyVersion)_Linux-64bit.tar.gz
              tar zxvf trivy_$(trivyVersion)_Linux-64bit.tar.gz
              sudo mv trivy /usr/local/bin/
            displayName: 'Install Trivy'
            
          - script: |
              trivy image --format sarif --output trivy-results.sarif $(containerRegistry)/core-banking:$(buildVersion)
            displayName: 'Scan Core Banking Image'

          - script: |
              trivy image --format sarif --output trivy-frontend-results.sarif $(containerRegistry)/frontend:$(buildVersion)
            displayName: 'Scan Frontend Image'

          - script: |
              trivy image --format sarif --output trivy-api-gateway-results.sarif $(containerRegistry)/api-gateway:$(buildVersion)
            displayName: 'Scan API Gateway Image'

          - script: |
              trivy image --format sarif --output trivy-payment-processing-results.sarif $(containerRegistry)/payment-processing:$(buildVersion)
            displayName: 'Scan Payment Processing Image'

          - script: |
              trivy image --format sarif --output trivy-auth-service-results.sarif $(containerRegistry)/auth-service:$(buildVersion)
            displayName: 'Scan Auth Service Image'
            
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Trivy Results'
            inputs:
              pathToPublish: '*.sarif'
              artifactName: 'trivy-results'

      - job: DependencyScan
        displayName: 'Dependency Security Scan'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            displayName: 'Checkout source code'
            
          - task: JavaToolInstaller@0
            displayName: 'Install Java 17'
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
              
          - task: Maven@3
            displayName: 'OWASP Dependency Check'
            inputs:
              mavenPomFile: 'services/core-banking/pom.xml'
              goals: 'org.owasp:dependency-check-maven:check'
              options: '-DfailBuildOnCVSS=7'
              
          - task: NodeTool@0
            displayName: 'Install Node.js 18'
            inputs:
              versionSpec: '18.x'
              
          - script: |
              cd frontend
              npm audit --audit-level moderate
            displayName: 'NPM Audit'
            continueOnError: true

  # ============================================================================
  # DEPLOY TO DEVELOPMENT
  # ============================================================================
  - stage: DeployDev
    displayName: 'Deploy to Development'
    dependsOn:
      - Build
      - SecurityScan
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    variables:
      environment: 'development'
      kubernetesNamespace: 'payment-engine-dev'
      apiGatewayDigest: $[ dependencies.Build.outputs['BuildBackend.setApiGatewayDigest.apiGatewayDigest'] ]
      paymentProcessingDigest: $[ dependencies.Build.outputs['BuildBackend.setPaymentProcessingDigest.paymentProcessingDigest'] ]
      authServiceDigest: $[ dependencies.Build.outputs['BuildBackend.setAuthServiceDigest.authServiceDigest'] ]
    jobs:
      - deployment: DeployToDev
        displayName: 'Deploy to Development Environment'
        pool:
          vmImage: 'ubuntu-latest'
        environment: 'payment-engine-dev'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: 'Checkout source code'
                  
                - task: KubernetesManifest@0
                  displayName: 'Create Development Namespace'
                  inputs:
                    action: 'deploy'
                    kubernetesServiceConnection: $(kubernetesConnection)
                    namespace: $(kubernetesNamespace)
                    manifests: |
                      deployment/kubernetes/namespace.yaml
                      
                - task: KubernetesManifest@0
                  displayName: 'Deploy ConfigMaps and External Secrets'
                  inputs:
                    action: 'deploy'
                    kubernetesServiceConnection: $(kubernetesConnection)
                    namespace: $(kubernetesNamespace)
                    manifests: |
                      deployment/kubernetes/configmaps.yaml
                      deployment/kubernetes/external-secrets.yaml

                - task: HelmDeploy@0
                  displayName: 'Deploy Payment Engine Helm chart'
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceConnection: $(kubernetesConnection)
                    namespace: $(kubernetesNamespace)
                    command: upgrade
                    chartType: FilePath
                    chartPath: deployment/helm/payment-engine
                    releaseName: payment-engine
                    install: true
                    valueFile: |
                      deployment/helm/payment-engine/values.yaml
                      deployment/helm/payment-engine/values-development.yaml
                    overrideValues: |
                      global.imageRegistry=$(containerRegistry)
                      components.apiGateway.image.tag=$(buildVersion)
                      components.apiGateway.image.digest=$(apiGatewayDigest)
                      components.paymentProcessing.image.tag=$(buildVersion)
                      components.paymentProcessing.image.digest=$(paymentProcessingDigest)
                      components.authService.image.tag=$(buildVersion)
                      components.authService.image.digest=$(authServiceDigest)
                    arguments: '--wait --timeout 10m'

                - task: Kubernetes@1
                  displayName: 'Wait for Helm Deployments'
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceEndpoint: $(kubernetesConnection)
                    namespace: $(kubernetesNamespace)
                    command: 'rollout'
                    arguments: 'status deployment/payment-engine-apigateway --timeout=600s'

                - task: Kubernetes@1
                  displayName: 'Wait for Payment Processing Deployment'
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceEndpoint: $(kubernetesConnection)
                    namespace: $(kubernetesNamespace)
                    command: 'rollout'
                    arguments: 'status deployment/payment-engine-paymentprocessing --timeout=600s'

                - task: Kubernetes@1
                  displayName: 'Wait for Auth Service Deployment'
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceEndpoint: $(kubernetesConnection)
                    namespace: $(kubernetesNamespace)
                    command: 'rollout'
                    arguments: 'status deployment/payment-engine-authservice --timeout=600s'

  # ============================================================================
  # INTEGRATION TESTS
  # ============================================================================
  - stage: IntegrationTests
    displayName: 'Integration Tests'
    dependsOn: DeployDev
    condition: succeeded()
    jobs:
      - job: APITests
        displayName: 'API Integration Tests'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            displayName: 'Checkout source code'
            
          - task: JavaToolInstaller@0
            displayName: 'Install Java 17'
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
              
          - task: Maven@3
            displayName: 'Run Integration Tests'
            inputs:
              mavenPomFile: 'services/core-banking/pom.xml'
              goals: 'test'
              options: '-Dtest=**/*IntegrationTest -Dspring.profiles.active=integration'
              
          - task: PublishTestResults@2
            displayName: 'Publish Integration Test Results'
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/failsafe-reports/TEST-*.xml'

      - job: LoadTests
        displayName: 'Performance Load Tests'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - script: |
              # Install k6
              sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
              echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
              sudo apt-get update
              sudo apt-get install k6
            displayName: 'Install k6'
            
          - script: |
              k6 run --out json=load-test-results.json tests/load/payment-api-load-test.js
            displayName: 'Run Load Tests'
            continueOnError: true
            
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Load Test Results'
            inputs:
              pathToPublish: 'load-test-results.json'
              artifactName: 'load-test-results'

  # ============================================================================
  # DEPLOY TO STAGING
  # ============================================================================
  - stage: DeployStaging
    displayName: 'Deploy to Staging'
    dependsOn: IntegrationTests
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    variables:
      environment: 'staging'
      kubernetesNamespace: 'payment-engine-staging'
      apiGatewayDigest: $[ dependencies.Build.outputs['BuildBackend.setApiGatewayDigest.apiGatewayDigest'] ]
      paymentProcessingDigest: $[ dependencies.Build.outputs['BuildBackend.setPaymentProcessingDigest.paymentProcessingDigest'] ]
      authServiceDigest: $[ dependencies.Build.outputs['BuildBackend.setAuthServiceDigest.authServiceDigest'] ]
    jobs:
      - deployment: DeployToStaging
        displayName: 'Deploy to Staging Environment'
        pool:
          vmImage: 'ubuntu-latest'
        environment: 'payment-engine-staging'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: 'Checkout source code'
                  
                - task: KubernetesManifest@0
                  displayName: 'Deploy ConfigMaps and External Secrets'
                  inputs:
                    action: 'deploy'
                    kubernetesServiceConnection: $(kubernetesConnection)
                    namespace: $(kubernetesNamespace)
                    manifests: |
                      deployment/kubernetes/configmaps.yaml
                      deployment/kubernetes/external-secrets.yaml

                - task: HelmDeploy@0
                  displayName: 'Deploy Payment Engine Helm chart (staging)'
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceConnection: $(kubernetesConnection)
                    namespace: $(kubernetesNamespace)
                    command: upgrade
                    chartType: FilePath
                    chartPath: deployment/helm/payment-engine
                    releaseName: payment-engine
                    install: true
                    valueFile: |
                      deployment/helm/payment-engine/values.yaml
                      deployment/helm/payment-engine/values-staging.yaml
                    overrideValues: |
                      global.imageRegistry=$(containerRegistry)
                      components.apiGateway.image.tag=$(buildVersion)
                      components.apiGateway.image.digest=$(apiGatewayDigest)
                      components.paymentProcessing.image.tag=$(buildVersion)
                      components.paymentProcessing.image.digest=$(paymentProcessingDigest)
                      components.authService.image.tag=$(buildVersion)
                      components.authService.image.digest=$(authServiceDigest)
                    arguments: '--wait --timeout 10m'

                - task: Kubernetes@1
                  displayName: 'Wait for Staging Deployments'
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceEndpoint: $(kubernetesConnection)
                    namespace: $(kubernetesNamespace)
                    command: 'rollout'
                    arguments: 'status deployment/payment-engine-apigateway --timeout=600s'

                - task: Kubernetes@1
                  displayName: 'Wait for Staging Payment Processing'
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceEndpoint: $(kubernetesConnection)
                    namespace: $(kubernetesNamespace)
                    command: 'rollout'
                    arguments: 'status deployment/payment-engine-paymentprocessing --timeout=600s'

                - task: Kubernetes@1
                  displayName: 'Wait for Staging Auth Service'
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceEndpoint: $(kubernetesConnection)
                    namespace: $(kubernetesNamespace)
                    command: 'rollout'
                    arguments: 'status deployment/payment-engine-authservice --timeout=600s'

  # ============================================================================
  # DEPLOY TO PRODUCTION
  # ============================================================================
  - stage: DeployProduction
    displayName: 'Deploy to Production'
    dependsOn: DeployStaging
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    variables:
      environment: 'production'
      kubernetesNamespace: 'payment-engine'
      apiGatewayDigest: $[ dependencies.Build.outputs['BuildBackend.setApiGatewayDigest.apiGatewayDigest'] ]
      paymentProcessingDigest: $[ dependencies.Build.outputs['BuildBackend.setPaymentProcessingDigest.paymentProcessingDigest'] ]
      authServiceDigest: $[ dependencies.Build.outputs['BuildBackend.setAuthServiceDigest.authServiceDigest'] ]
    jobs:
      - deployment: DeployToProduction
        displayName: 'Deploy to Production Environment'
        pool:
          vmImage: 'ubuntu-latest'
        environment: 'payment-engine-production'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: 'Checkout source code'
                  
                - task: KubernetesManifest@0
                  displayName: 'Deploy ConfigMaps and External Secrets'
                  inputs:
                    action: 'deploy'
                    kubernetesServiceConnection: $(kubernetesConnection)
                    namespace: $(kubernetesNamespace)
                    manifests: |
                      deployment/kubernetes/configmaps.yaml
                      deployment/kubernetes/external-secrets.yaml

                - task: HelmDeploy@0
                  displayName: 'Deploy Payment Engine Helm chart (production)'
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceConnection: $(kubernetesConnection)
                    namespace: $(kubernetesNamespace)
                    command: upgrade
                    chartType: FilePath
                    chartPath: deployment/helm/payment-engine
                    releaseName: payment-engine
                    install: true
                    valueFile: |
                      deployment/helm/payment-engine/values.yaml
                      deployment/helm/payment-engine/values-production.yaml
                    overrideValues: |
                      global.imageRegistry=$(containerRegistry)
                      components.apiGateway.image.tag=$(buildVersion)
                      components.apiGateway.image.digest=$(apiGatewayDigest)
                      components.paymentProcessing.image.tag=$(buildVersion)
                      components.paymentProcessing.image.digest=$(paymentProcessingDigest)
                      components.authService.image.tag=$(buildVersion)
                      components.authService.image.digest=$(authServiceDigest)
                    arguments: '--wait --timeout 10m'

                - task: Kubernetes@1
                  displayName: 'Verify Production API Gateway'
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceEndpoint: $(kubernetesConnection)
                    namespace: $(kubernetesNamespace)
                    command: 'rollout'
                    arguments: 'status deployment/payment-engine-apigateway --timeout=600s'

                - task: Kubernetes@1
                  displayName: 'Verify Production Payment Processing'
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceEndpoint: $(kubernetesConnection)
                    namespace: $(kubernetesNamespace)
                    command: 'rollout'
                    arguments: 'status deployment/payment-engine-paymentprocessing --timeout=600s'

                - task: Kubernetes@1
                  displayName: 'Verify Production Auth Service'
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceEndpoint: $(kubernetesConnection)
                    namespace: $(kubernetesNamespace)
                    command: 'rollout'
                    arguments: 'status deployment/payment-engine-authservice --timeout=600s'

                - script: |
                    echo "Deployment completed successfully!"
                    echo "Version: $(buildVersion)"
                    echo "Environment: Production"
                    echo "Namespace: $(kubernetesNamespace)"
                  displayName: 'Deployment Summary'