apiVersion: v1
kind: ConfigMap
metadata:
  name: backup-config
  namespace: payment-engine
  labels:
    app: payment-engine
    component: backup
data:
  backup-schedule.sh: |
    #!/bin/bash
    
    # Payment Engine Backup Script
    # Automated backup for PostgreSQL and persistent volumes
    
    set -e
    
    TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
    BACKUP_DIR="/backups"
    RETENTION_DAYS=30
    
    # Database backup
    echo "Starting database backup at $TIMESTAMP"
    
    PGPASSWORD=$DATABASE_PASSWORD pg_dump \
      -h $DATABASE_HOST \
      -p $DATABASE_PORT \
      -U $DATABASE_USERNAME \
      -d $DATABASE_NAME \
      --verbose \
      --clean \
      --if-exists \
      --create \
      --format=custom \
      --file="$BACKUP_DIR/payment_engine_db_$TIMESTAMP.backup"
    
    if [ $? -eq 0 ]; then
      echo "Database backup completed successfully"
    else
      echo "Database backup failed"
      exit 1
    fi
    
    # Compress backup
    gzip "$BACKUP_DIR/payment_engine_db_$TIMESTAMP.backup"
    
    # Upload to Azure Blob Storage
    az storage blob upload \
      --account-name $AZURE_STORAGE_ACCOUNT \
      --container-name payment-engine-backups \
      --name "database/payment_engine_db_$TIMESTAMP.backup.gz" \
      --file "$BACKUP_DIR/payment_engine_db_$TIMESTAMP.backup.gz" \
      --auth-mode login
    
    # Clean up old local backups
    find $BACKUP_DIR -name "*.backup.gz" -mtime +$RETENTION_DAYS -delete
    
    echo "Backup process completed at $(date)"

  restore-database.sh: |
    #!/bin/bash
    
    # Payment Engine Database Restore Script
    
    set -e
    
    if [ -z "$1" ]; then
      echo "Usage: $0 <backup_file_name>"
      echo "Example: $0 payment_engine_db_20240115_143000.backup.gz"
      exit 1
    fi
    
    BACKUP_FILE="$1"
    RESTORE_DIR="/tmp/restore"
    
    mkdir -p $RESTORE_DIR
    
    # Download backup from Azure Blob Storage
    echo "Downloading backup file: $BACKUP_FILE"
    az storage blob download \
      --account-name $AZURE_STORAGE_ACCOUNT \
      --container-name payment-engine-backups \
      --name "database/$BACKUP_FILE" \
      --file "$RESTORE_DIR/$BACKUP_FILE" \
      --auth-mode login
    
    # Decompress if needed
    if [[ $BACKUP_FILE == *.gz ]]; then
      gunzip "$RESTORE_DIR/$BACKUP_FILE"
      BACKUP_FILE=${BACKUP_FILE%.gz}
    fi
    
    # Restore database
    echo "Restoring database from: $BACKUP_FILE"
    PGPASSWORD=$DATABASE_PASSWORD pg_restore \
      -h $DATABASE_HOST \
      -p $DATABASE_PORT \
      -U $DATABASE_USERNAME \
      -d $DATABASE_NAME \
      --verbose \
      --clean \
      --if-exists \
      --create \
      "$RESTORE_DIR/$BACKUP_FILE"
    
    if [ $? -eq 0 ]; then
      echo "Database restore completed successfully"
    else
      echo "Database restore failed"
      exit 1
    fi
    
    # Clean up
    rm -rf $RESTORE_DIR
    
    echo "Restore process completed at $(date)"

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: database-backup
  namespace: payment-engine
  labels:
    app: payment-engine
    component: backup
spec:
  schedule: "0 2 * * *" # Daily at 2 AM UTC
  timeZone: "UTC"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 7
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: payment-engine
            component: backup-job
        spec:
          restartPolicy: OnFailure
          serviceAccountName: backup-service-account
          containers:
            - name: database-backup
              image: postgres:15
              env:
                - name: DATABASE_HOST
                  valueFrom:
                    configMapKeyRef:
                      name: payment-engine-config
                      key: DATABASE_HOST
                - name: DATABASE_PORT
                  valueFrom:
                    configMapKeyRef:
                      name: payment-engine-config
                      key: DATABASE_PORT
                - name: DATABASE_NAME
                  valueFrom:
                    configMapKeyRef:
                      name: payment-engine-config
                      key: DATABASE_NAME
                - name: DATABASE_USERNAME
                  valueFrom:
                    configMapKeyRef:
                      name: payment-engine-config
                      key: DATABASE_USERNAME
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: payment-engine-secrets
                      key: DATABASE_PASSWORD
                - name: AZURE_STORAGE_ACCOUNT
                  value: "paymentenginesa"
              command: ["/bin/bash"]
              args: ["/scripts/backup-schedule.sh"]
              volumeMounts:
                - name: backup-scripts
                  mountPath: /scripts
                  readOnly: true
                - name: backup-storage
                  mountPath: /backups
              resources:
                requests:
                  memory: "256Mi"
                  cpu: "100m"
                limits:
                  memory: "512Mi"
                  cpu: "200m"
          volumes:
            - name: backup-scripts
              configMap:
                name: backup-config
                defaultMode: 0755
            - name: backup-storage
              emptyDir: {}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backup-service-account
  namespace: payment-engine
  labels:
    app: payment-engine
    component: backup
  annotations:
    azure.workload.identity/client-id: "backup-managed-identity-client-id"

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: payment-engine
  name: backup-role
rules:
  - apiGroups: [""]
    resources: ["pods", "persistentvolumeclaims", "persistentvolumes"]
    verbs: ["get", "list", "create"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list", "create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: backup-role-binding
  namespace: payment-engine
subjects:
  - kind: ServiceAccount
    name: backup-service-account
    namespace: payment-engine
roleRef:
  kind: Role
  name: backup-role
  apiGroup: rbac.authorization.k8s.io