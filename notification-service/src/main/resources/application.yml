spring:
  application:
    name: notification-service
  
  # JPA / Database Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    database-platform: org.hibernate.dialect.PostgreSQL10Dialect
    show-sql: false
    properties:
      hibernate:
        format_sql: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
  
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:payment_engine}
    username: ${DB_USER:postgres}
    password: ${DB_PASSWORD:postgres}
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 20000
      idle-timeout: 300000
  
  # Flyway Configuration
  flyway:
    enabled: true
    baseline-on-migrate: true
    out-of-order: false
    locations: classpath:db/migration
  
  # Kafka Configuration (Competing Consumers)
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: notification-service-group
      auto-offset-reset: earliest
      enable-auto-commit: false
      max-poll-records: 100
      properties:
        session.timeout.ms: 30000
        max.poll.interval.ms: 300000
    producer:
      acks: all
      retries: 3
      compression-type: snappy
    listener:
      ack-mode: manual
      poll-timeout: 3000
  
  # Redis Caching Configuration
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    timeout: 60000ms
    jedis:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
  
  # Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: 600000 # 10 minutes
  
  # Security - OAuth2 Resource Server (Azure AD B2C)
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${AZURE_AD_ISSUER_URI:https://your-tenant.b2clogin.com/your-tenant.onmicrosoft.com/v2.0}
          jwk-set-uri: ${AZURE_AD_JWK_SET_URI:https://your-tenant.b2clogin.com/your-tenant.onmicrosoft.com/discovery/v2.0/keys}
  
  # Scheduling Configuration
  task:
    scheduling:
      thread-name-prefix: notification-scheduler-
      pool:
        size: 5
      enable-scheduling: true
  
  # Async Configuration
  task:
    execution:
      thread-name-prefix: notification-async-
      pool:
        core-size: 10
        max-size: 20
        queue-capacity: 100

# Server Configuration
server:
  port: ${SERVER_PORT:8084}
  servlet:
    context-path: /
  compression:
    enabled: true
    min-response-size: 1024

# Logging Configuration
logging:
  level:
    root: INFO
    com.payments: DEBUG
    org.springframework.kafka: INFO
    org.springframework.security: INFO
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

# Management / Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

# Notification Service Specific Configuration
notification:
  # Email Configuration (AWS SES)
  email:
    enabled: ${EMAIL_ENABLED:true}
    provider: ${EMAIL_PROVIDER:ses}
    from: ${EMAIL_FROM:noreply@payments.com}
    ses:
      region: ${AWS_REGION:eu-west-1}
      access-key: ${AWS_ACCESS_KEY_ID:}
      secret-key: ${AWS_SECRET_ACCESS_KEY:}
  
  # SMS Configuration (Twilio)
  sms:
    enabled: ${SMS_ENABLED:true}
    provider: ${SMS_PROVIDER:twilio}
    twilio:
      account-sid: ${TWILIO_ACCOUNT_SID:}
      auth-token: ${TWILIO_AUTH_TOKEN:}
      from-number: ${TWILIO_FROM_NUMBER:}
  
  # Push Notification Configuration (FCM)
  push:
    enabled: ${PUSH_ENABLED:true}
    provider: ${PUSH_PROVIDER:fcm}
    fcm:
      project-id: ${FCM_PROJECT_ID:}
      credentials-path: ${FCM_CREDENTIALS_PATH:/var/secrets/fcm-credentials.json}
  
  # Retry Configuration
  retry:
    max-attempts: 3
    backoff-ms: 1000
    backoff-multiplier: 2.0
  
  # Batch Configuration
  batch:
    size: 50
    timeout-seconds: 30
  
  # Scheduler Configuration
  scheduler:
    retry-interval-seconds: 30
    batch-flush-interval-seconds: 60

# Kafka Topics
kafka:
  topics:
    payment-initiated: payment.initiated
    payment-cleared: payment.cleared
    payment-failed: payment.failed
    notification-dlq: notification.events.dlq

# OpenAPI / Swagger Documentation
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    enabled: true

  adapter:
    # Feature toggle: internal (default) or ibm-mq
    type: internal  # Set to "ibm-mq" to enable IBM MQ strategy
    
    # IBM MQ specific configuration
    ibm-mq:
      enabled: false  # Set to true to enable MQ connectivity
      
      # Connection settings
      host: localhost
      port: 1414
      channel: DEV.APP.SVRCONN
      queue-manager: QM1
      user: mqadmin
      password: ${IBM_MQ_PASSWORD:}  # Set via environment variable
      
      # Queue configuration
      queues:
        notifications-outbound: notification.outbound
        notifications-dlq: notification.dlq
      
      # Message settings
      message:
        ttl-seconds: 3600  # 1 hour
        priority: 5  # 0-9, higher = more important
        persistent: false  # Fire-and-forget
        encoding: UTF-8
      
      # Connection pool
      connection-pool:
        initial-size: 5
        max-size: 20
        idle-timeout-ms: 600000  # 10 minutes
      
      # Retry configuration
      retry:
        max-attempts: 3
        backoff-ms: 1000
        multiplier: 2.0
      
      # Monitoring
      monitoring:
        enabled: true
        metrics-prefix: ibm_mq_notification
        health-check-interval-seconds: 30
