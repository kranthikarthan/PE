@startuml DEPLOYMENT_ARCHITECTURE
!theme plain
title ISO 20022 Payment Engine - Deployment Architecture

package "Development Environment" {
    [GitHub Repository] as GH
    [Local Development] as LD
    [Docker Compose] as DC
    [Minikube] as MK
    [Development Database] as DevDB
    [Development Kafka] as DevKafka
}

package "CI/CD Pipeline" {
    [Azure DevOps] as AD
    [Maven Build] as MB
    [Docker Build] as DB
    [SonarQube] as SQ
    [Trivy Scanner] as TS
}

package "Testing Environments" {
    package "Unit Testing" {
        [JUnit Tests] as JUnit
        [Mockito] as Mockito
        [TestContainers] as TC
        [Integration Tests] as IT
    }
    
    package "Integration Testing" {
        [Test Environment] as TE
        [Test Database] as TestDB
        [Test Kafka] as TestKafka
        [Test Redis] as TestRedis
        [API Testing] as AT
    }
    
    package "Performance Testing" {
        [JMeter] as JMeter
        [Gatling] as Gatling
        [Performance Environment] as PE
        [Load Testing] as LT
    }
}

package "Staging Environment" {
    [Staging Kubernetes] as SK
    [Staging Database] as StagingDB
    [Staging Kafka] as StagingKafka
    [Staging Redis] as StagingRedis
    [Staging Monitoring] as SM
    [UAT Testing] as UAT
}

package "Production Environment" {
    package "Production Kubernetes" {
        [Production Cluster] as PC
        [Production Gateway] as PG
        [Production Middleware] as PM
        [Production Core Banking] as PCB
        [Production Monitoring] as PMon
    }
    
    package "Production Data" {
        [Production PostgreSQL] as PPG
        [Production Redis] as PR
        [Production Kafka] as PK
        [Production Backup] as PB
    }
    
    package "Production Security" {
        [Production OAuth2] as POAuth2
        [Production JWT] as PJWT
        [Production Encryption] as PE
        [Production Audit] as PAudit
    }
}

package "Disaster Recovery" {
    [DR Site] as DRS
    [DR Database] as DRDB
    [DR Kafka] as DRK
    [DR Redis] as DRR
    [DR Monitoring] as DRM
    [Backup & Recovery] as BR
}

package "External Systems" {
    [Clearing Systems] as CS
    [Third Party APIs] as TPA
    [Webhook Endpoints] as WE
    [SMTP Server] as SMTP
    [SMS Gateway] as SMS
}

' Development flow
GH --> LD : "Code Checkout"
LD --> DC : "Local Development"
DC --> MK : "Local Kubernetes"
MK --> DevDB : "Development Database"
MK --> DevKafka : "Development Kafka"

' CI/CD flow
AD --> MB : "Maven Build"
MB --> DB : "Docker Build"
DB --> SQ : "Code Quality"
DB --> TS : "Security Scan"
AD --> SK : "Deploy to Staging"
AD --> PC : "Deploy to Production"

' Testing flow
LD --> JUnit : "Unit Tests"
JUnit --> Mockito : "Mocking"
JUnit --> TC : "Test Containers"
TC --> IT : "Integration Tests"
IT --> TE : "Test Environment"
TE --> TestDB : "Test Database"
TE --> TestKafka : "Test Kafka"
TE --> TestRedis : "Test Redis"
TE --> AT : "API Testing"

LD --> JMeter : "Performance Tests"
JMeter --> Gatling : "Load Tests"
Gatling --> PE : "Performance Environment"
PE --> LT : "Load Testing"

' Staging flow
AD --> SK : "Staging Deployment"
SK --> StagingDB : "Staging Database"
SK --> StagingKafka : "Staging Kafka"
SK --> StagingRedis : "Staging Redis"
SK --> SM : "Staging Monitoring"
SK --> UAT : "User Acceptance Testing"

' Production flow
AD --> PC : "Production Deployment"
PC --> PG : "Production Gateway"
PC --> PM : "Production Middleware"
PC --> PCB : "Production Core Banking"
PC --> PMon : "Production Monitoring"

PC --> PPG : "Production PostgreSQL"
PC --> PR : "Production Redis"
PC --> PK : "Production Kafka"
PC --> PB : "Production Backup"

PC --> POAuth2 : "Production OAuth2"
PC --> PJWT : "Production JWT"
PC --> PE : "Production Encryption"
PC --> PAudit : "Production Audit"

' Disaster recovery flow
PC --> DRS : "DR Replication"
DRS --> DRDB : "DR Database"
DRS --> DRK : "DR Kafka"
DRS --> DRR : "DR Redis"
DRS --> DRM : "DR Monitoring"
PB --> BR : "Backup & Recovery"

' External system connections
PM --> CS : "Clearing System APIs"
PCB --> CS : "Clearing System APIs"
PM --> TPA : "Third Party APIs"
PM --> WE : "Webhook Delivery"
PM --> SMTP : "Email Notifications"
PM --> SMS : "SMS Notifications"

note right of GH
Development Workflow:
- GitHub for source control
- Local development with Docker
- Minikube for local Kubernetes
- Development databases
- Feature branch workflow
- Code review process
end note

note right of AD
CI/CD Pipeline:
- Azure DevOps for automation
- Maven for building
- Docker for containerization
- SonarQube for code quality
- Trivy for security scanning
- Automated deployment to environments
end note

note right of JUnit
Testing Strategy:
- Unit tests with JUnit
- Mocking with Mockito
- Integration tests with TestContainers
- API testing with Postman/Newman
- Performance testing with JMeter/Gatling
- Load testing in dedicated environment
- UAT in staging environment
end note

note right of SK
Staging Environment:
- Production-like environment
- Full data replication
- Performance testing
- UAT testing
- Security testing
- Load testing
- Monitoring and alerting
end note

note right of PC
Production Environment:
- High availability cluster
- Auto-scaling capabilities
- Load balancing
- Circuit breakers
- Rate limiting
- Security policies
- Monitoring and alerting
- Backup and recovery
end note

note right of PPG
Production Data:
- PostgreSQL with replication
- Redis cluster
- Kafka cluster
- Automated backups
- Point-in-time recovery
- Data encryption
- Access controls
- Audit logging
end note

note right of POAuth2
Production Security:
- OAuth2/JWT authentication
- Spring Security
- Message encryption (AES)
- Digital signatures (RSA)
- Audit logging
- RBAC
- Compliance monitoring
end note

note right of DRS
Disaster Recovery:
- Multi-region deployment
- Automated failover
- Data replication
- Backup and recovery
- RTO/RPO targets
- Testing procedures
- Documentation
- Runbooks
end note

@enduml